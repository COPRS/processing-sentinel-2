plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.8' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
    id 'io.freefair.lombok' version '6.4.3' apply false
    id 'com.palantir.docker' version '0.33.0' apply false
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
}

ext {
    sonarqubeToken = System.getenv("SONARQUBE_TOKEN")
    sonarqubeHost = System.getenv("SONARQUBE_HOST")
    gitBranch = System.getenv("GIT_BRANCH")
}

allprojects {

    repositories {
        mavenCentral()
        maven {
            url "https://repo.spring.io/release"
        }
        maven {
            url "https://repo.spring.io/snapshot"
        }
        maven {
            url "https://repo.spring.io/milestone"
        }
    }

    jar.enabled = false

    sonarqube {
        properties {
            property "sonar.projectName", "processing-sentinel-2"
            property "sonar.projectKey", "processing-sentinel-2"
            property "sonar.host.url", "${sonarqubeHost}"
            property "sonar.login", "${sonarqubeToken}"
            property "sonar.branch.name", "${gitBranch}"
        }
    }

    jacocoTestReport {
        reports {
            xml.required = true
            xml.enabled true
            csv.enabled false
            html.enabled false
        }
    }

}

subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'

    group = 'eu.csgroup.coprs.ps2'
    version = '0.0.4-SNAPSHOT'
    sourceCompatibility = '17'

    ext {
        springCloudVersion = "2021.0.3"
        podamVersion = "7.2.8.RELEASE"

        registryBase = System.getenv("REGISTRY_BASE")
        registryProject = System.getenv("REGISTRY_PROJECT")
        registryUser = System.getenv("REGISTRY_USER")
        registryPassword = System.getenv("REGISTRY_PWD")

        amazonSDKVersion = "2.17.211"
        amazonSDKS3Version = "2.17.211-PREVIEW"

        apacheCommonsLangVersion = "3.12.0"
        apacheCommonsIOVersion = "2.11.0"
        mapstructVersion = "1.4.2.Final"
        bytebuddyVersion = "1.12.9"
        mockitoVersion = "4.5.1"
    }

    dependencies {

        implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "io.micrometer:micrometer-registry-prometheus"
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-webflux"

        implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
        implementation "org.apache.commons:commons-compress:1.21"
        implementation "commons-io:commons-io:${apacheCommonsIOVersion}"
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"

        implementation "org.springframework.boot:spring-boot-starter-log4j2"
        modules {
            module("org.springframework.boot:spring-boot-starter-logging") {
                replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
            }
        }
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation "uk.co.jemos.podam:podam:${podamVersion}"
        testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "net.bytebuddy:byte-buddy:${bytebuddyVersion}"
        testImplementation "net.bytebuddy:byte-buddy-agent:${bytebuddyVersion}"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    sonarqube {
        properties {
//            property "sonar.coverage.jacoco.xmlReportPaths", "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
//            property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/jacoco.xml"
        }
    }

//	java {
//		withJavadocJar()
//		withSourcesJar()
//	}

    tasks.named('test') {
        useJUnitPlatform()
    }

//    plugins.withType(JacocoPlugin) {
//        tasks["test"].finalizedBy 'jacocoTestReport'
//    }

    tasks.named('bootBuildImage') {
        imageName = "${registryBase}/${registryProject}/${project.name}:${project.version}"
        publish = true
        docker {
            publishRegistry {
                url = "https://${registryBase}/${registryProject}"
                username = "${registryUser}"
                password = "${registryPassword}"
            }
        }
    }

    jar.enabled = false
    bootJar.enabled = false
    bootJarMainClassName.enabled = false
    bootBuildImage.enabled = false

}

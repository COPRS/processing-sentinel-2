plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.3' apply false
    id 'io.spring.dependency-management' version '1.0.12.RELEASE' apply false
    id 'io.freefair.lombok' version '6.5.0.2' apply false
    id 'com.palantir.docker' version '0.34.0' apply false
    id 'org.sonarqube' version '3.4.0.2513'
    id 'jacoco'
}

ext {
    sonarqubeToken = System.getenv("SONARQUBE_TOKEN")
    sonarqubeHost = System.getenv("SONARQUBE_HOST")
    gitBranch = System.getenv("GIT_BRANCH")
}

allprojects {

    repositories {
        mavenCentral()
        maven {
            url "https://repo.spring.io/release"
        }
        maven {
            url "https://repo.spring.io/snapshot"
        }
        maven {
            url "https://repo.spring.io/milestone"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    jar.enabled = false

    sonarqube {
        properties {
            property "sonar.projectName", "processing-sentinel-2"
            property "sonar.projectKey", "processing-sentinel-2"
            property "sonar.host.url", "${sonarqubeHost}"
            property "sonar.login", "${sonarqubeToken}"
            property "sonar.branch.name", "${gitBranch}"
            property "sonar.java.source", 17
            property "sonar.coverage.jacoco.xmlReportPaths", "$projectDir.parentFile.path/build/reports/jacoco/test/jacocoTestReport.xml"
        }
    }

}

subprojects {

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    group = 'eu.csgroup.coprs.ps2'
    version = '1.1.0-rc1-SNAPSHOT'
    sourceCompatibility = '17'

    ext {
        // Libs
        springCloudVersion = "2021.0.3"
        amazonSDKVersion = "2.17.224"
        amazonSDKS3Version = "2.17.224-PREVIEW"
        apacheCommonsLangVersion = "3.12.0"
        apacheCommonsIOVersion = "2.11.0"
        apacheCommonsCodecVersion = "1.15"
        prometheusRsocketVersion = "1.5.0"

        // Test libs
        // See core-common for imports
        podamVersion = "7.2.8.RELEASE"
        mapstructVersion = "1.4.2.Final"
        bytebuddyVersion = "1.12.9"
        mockitoVersion = "4.5.1"
        okhttpVersion = "4.10.0"
        logCaptorVersion = "2.7.10";

        // Build parameters
        registryBase = System.getenv("REGISTRY_BASE")
        registryProject = System.getenv("REGISTRY_PROJECT")
        registryUser = System.getenv("REGISTRY_USER")
        registryPassword = System.getenv("REGISTRY_PWD")
        registryFolder = System.getenv("REGISTRY_FOLDER")
        dockerPrefix = registryBase ? "${registryBase}/${registryProject}/" : ""
        dockerPrefix += registryFolder ? "${registryFolder}/" : ""
        dockerPublish = registryBase
    }

    dependencies {

        implementation 'org.springframework.cloud:spring-cloud-starter-stream-kafka'

        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "io.micrometer:micrometer-registry-prometheus"
        implementation "io.micrometer.prometheus:prometheus-rsocket-spring:${prometheusRsocketVersion}"

        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-webflux"

        implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
        implementation "org.apache.commons:commons-compress:1.21"
        implementation "commons-codec:commons-codec:${apacheCommonsCodecVersion}"
        implementation "commons-io:commons-io:${apacheCommonsIOVersion}"
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"

        implementation "org.springframework.boot:spring-boot-starter-log4j2"
        modules {
            module("org.springframework.boot:spring-boot-starter-logging") {
                replacedBy("org.springframework.boot:spring-boot-starter-log4j2", "Use Log4j2 instead of Logback")
            }
        }
        implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        // See core-common build.gradle for test imports

        configurations {
            testImplementation {
                exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

//	java {
//		withJavadocJar()
//		withSourcesJar()
//	}

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            xml.enabled true
            csv.enabled false
            html.enabled true
        }
    }

    task allDeps(type: DependencyReportTask) {}

    tasks.named('bootBuildImage') {
        imageName = "${dockerPrefix}${project.name}:${project.version}"
        publish = dockerPublish
        docker {
            publishRegistry {
                url = "https://${registryBase}/${registryProject}"
                username = "${registryUser}"
                password = "${registryPassword}"
            }
        }
    }

    jar.enabled = false
    bootJar.enabled = false
    bootJarMainClassName.enabled = false
    bootBuildImage.enabled = false

}

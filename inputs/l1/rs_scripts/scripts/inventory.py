#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jun  9 15:49:20 2020 by generateDS.py version 2.29.2.
# Python 2.7.14 (default, Dec  5 2017, 13:55:53)  [GCC 4.4.7 20120313 (Red Hat 4.4.7-18)]
#
# Command line options:
#   ('-o', 'inventory.py')
#
# Command line arguments:
#   data/xsd/VALIDATION_SCHEMAS/PSD/Inventory_Metadata.xsd
#
# Command line:
#   /usr/local/bin/generateDS -o "inventory.py" data/xsd/VALIDATION_SCHEMAS/PSD/Inventory_Metadata.xsd
#
# Current working directory (os.getcwd()):
#   ipf_libcommon
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = False
BaseStrType_ = basestring

def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            return instring.encode(ExternalEncoding)
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Inventory_Metadata(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, File_ID=None, Parent_ID=None, Group_ID=None, File_Name=None, File_Version=None, System=None, Source=None, Source_Sw_Version=None, Generation_Time=None, Validity_Start=None, Validity_Stop=None, Start_Orbit_Number=None, Stop_Orbit_Number=None, Geographic_Localization=None, Quality_Info=None, Data_Size=None, File_Type=None, Detector=None, File_Class=None, Sensor_Code=None, Sensor_Mode=None, Acquisition_Station=None, Processing_Station=None, Satellite_Code=None, Ascending_Flag=None, CloudPercentage=None):
        self.original_tagname_ = None
        self.File_ID = File_ID
        self.validate_File_IDType(self.File_ID)
        self.Parent_ID = Parent_ID
        self.validate_Parent_IDType(self.Parent_ID)
        self.Group_ID = Group_ID
        self.validate_Group_IDType(self.Group_ID)
        self.File_Name = File_Name
        self.validate_File_NameType(self.File_Name)
        self.File_Version = File_Version
        self.validate_File_VersionType(self.File_Version)
        self.System = System
        self.validate_SystemType(self.System)
        self.Source = Source
        self.validate_SourceType(self.Source)
        self.Source_Sw_Version = Source_Sw_Version
        self.validate_Source_Sw_VersionType(self.Source_Sw_Version)
        self.Generation_Time = Generation_Time
        self.validate_Generation_TimeType(self.Generation_Time)
        self.Validity_Start = Validity_Start
        self.validate_Validity_StartType(self.Validity_Start)
        self.Validity_Stop = Validity_Stop
        self.validate_Validity_StopType(self.Validity_Stop)
        self.Start_Orbit_Number = Start_Orbit_Number
        self.validate_Start_Orbit_NumberType(self.Start_Orbit_Number)
        self.Stop_Orbit_Number = Stop_Orbit_Number
        self.validate_Stop_Orbit_NumberType(self.Stop_Orbit_Number)
        self.Geographic_Localization = Geographic_Localization
        self.Quality_Info = Quality_Info
        self.validate_Quality_InfoType(self.Quality_Info)
        self.Data_Size = Data_Size
        self.File_Type = File_Type
        self.validate_File_TypeType(self.File_Type)
        self.Detector = Detector
        self.validate_DetectorType(self.Detector)
        self.File_Class = File_Class
        self.validate_File_ClassType(self.File_Class)
        self.Sensor_Code = Sensor_Code
        self.validate_Sensor_CodeType(self.Sensor_Code)
        self.Sensor_Mode = Sensor_Mode
        self.validate_Sensor_ModeType(self.Sensor_Mode)
        self.Acquisition_Station = Acquisition_Station
        self.validate_Acquisition_StationType(self.Acquisition_Station)
        self.Processing_Station = Processing_Station
        self.validate_Processing_StationType(self.Processing_Station)
        self.Satellite_Code = Satellite_Code
        self.validate_Satellite_CodeType(self.Satellite_Code)
        self.Ascending_Flag = Ascending_Flag
        self.validate_Ascending_FlagType(self.Ascending_Flag)
        self.CloudPercentage = CloudPercentage
        self.validate_CloudPercentageType(self.CloudPercentage)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Inventory_Metadata)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Inventory_Metadata.subclass:
            return Inventory_Metadata.subclass(*args_, **kwargs_)
        else:
            return Inventory_Metadata(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File_ID(self): return self.File_ID
    def set_File_ID(self, File_ID): self.File_ID = File_ID
    def get_Parent_ID(self): return self.Parent_ID
    def set_Parent_ID(self, Parent_ID): self.Parent_ID = Parent_ID
    def get_Group_ID(self): return self.Group_ID
    def set_Group_ID(self, Group_ID): self.Group_ID = Group_ID
    def get_File_Name(self): return self.File_Name
    def set_File_Name(self, File_Name): self.File_Name = File_Name
    def get_File_Version(self): return self.File_Version
    def set_File_Version(self, File_Version): self.File_Version = File_Version
    def get_System(self): return self.System
    def set_System(self, System): self.System = System
    def get_Source(self): return self.Source
    def set_Source(self, Source): self.Source = Source
    def get_Source_Sw_Version(self): return self.Source_Sw_Version
    def set_Source_Sw_Version(self, Source_Sw_Version): self.Source_Sw_Version = Source_Sw_Version
    def get_Generation_Time(self): return self.Generation_Time
    def set_Generation_Time(self, Generation_Time): self.Generation_Time = Generation_Time
    def get_Validity_Start(self): return self.Validity_Start
    def set_Validity_Start(self, Validity_Start): self.Validity_Start = Validity_Start
    def get_Validity_Stop(self): return self.Validity_Stop
    def set_Validity_Stop(self, Validity_Stop): self.Validity_Stop = Validity_Stop
    def get_Start_Orbit_Number(self): return self.Start_Orbit_Number
    def set_Start_Orbit_Number(self, Start_Orbit_Number): self.Start_Orbit_Number = Start_Orbit_Number
    def get_Stop_Orbit_Number(self): return self.Stop_Orbit_Number
    def set_Stop_Orbit_Number(self, Stop_Orbit_Number): self.Stop_Orbit_Number = Stop_Orbit_Number
    def get_Geographic_Localization(self): return self.Geographic_Localization
    def set_Geographic_Localization(self, Geographic_Localization): self.Geographic_Localization = Geographic_Localization
    def get_Quality_Info(self): return self.Quality_Info
    def set_Quality_Info(self, Quality_Info): self.Quality_Info = Quality_Info
    def get_Data_Size(self): return self.Data_Size
    def set_Data_Size(self, Data_Size): self.Data_Size = Data_Size
    def get_File_Type(self): return self.File_Type
    def set_File_Type(self, File_Type): self.File_Type = File_Type
    def get_Detector(self): return self.Detector
    def set_Detector(self, Detector): self.Detector = Detector
    def get_File_Class(self): return self.File_Class
    def set_File_Class(self, File_Class): self.File_Class = File_Class
    def get_Sensor_Code(self): return self.Sensor_Code
    def set_Sensor_Code(self, Sensor_Code): self.Sensor_Code = Sensor_Code
    def get_Sensor_Mode(self): return self.Sensor_Mode
    def set_Sensor_Mode(self, Sensor_Mode): self.Sensor_Mode = Sensor_Mode
    def get_Acquisition_Station(self): return self.Acquisition_Station
    def set_Acquisition_Station(self, Acquisition_Station): self.Acquisition_Station = Acquisition_Station
    def get_Processing_Station(self): return self.Processing_Station
    def set_Processing_Station(self, Processing_Station): self.Processing_Station = Processing_Station
    def get_Satellite_Code(self): return self.Satellite_Code
    def set_Satellite_Code(self, Satellite_Code): self.Satellite_Code = Satellite_Code
    def get_Ascending_Flag(self): return self.Ascending_Flag
    def set_Ascending_Flag(self, Ascending_Flag): self.Ascending_Flag = Ascending_Flag
    def get_CloudPercentage(self): return self.CloudPercentage
    def set_CloudPercentage(self, CloudPercentage): self.CloudPercentage = CloudPercentage
    def validate_File_IDType(self, value):
        # Validate type File_IDType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_File_IDType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_File_IDType_patterns_, ))
    validate_File_IDType_patterns_ = [['^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_S\\d{8}T\\d{6}_D\\d{2}_N\\d{2}\\.\\d{2}$', '^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_A\\d{6}_T[\\w{Lu}_]{5}_N\\d{2}\\.\\d{2}$', '^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_S\\d{8}T\\d{6}_N\\d{2}\\.\\d{2}$']]
    def validate_Parent_IDType(self, value):
        # Validate type Parent_IDType, a restriction on item:DATASTRIP_ID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Parent_IDType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Parent_IDType_patterns_, ))
    validate_Parent_IDType_patterns_ = [['^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_S\\d{8}T\\d{6}_N\\d{2}\\.\\d{2}$', '^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_S\\d{8}T\\d{6}_N\\d{2}\\.\\d{2} S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_S\\d{8}T\\d{6}_N\\d{2}\\.\\d{2}$']]
    def validate_Group_IDType(self, value):
        # Validate type Group_IDType, a restriction on item:DATATAKE_ID.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Group_IDType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Group_IDType_patterns_, ))
    validate_Group_IDType_patterns_ = [['^GS2(A$|^B)_\\d{8}T\\d{6}_\\d{6}_N\\d{2}\\.\\d{2}$']]
    def validate_File_NameType(self, value):
        # Validate type File_NameType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_File_NameType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_File_NameType_patterns_, ))
    validate_File_NameType_patterns_ = [['^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_S\\d{8}T\\d{6}_D\\d{2}_N\\d{2}\\.\\d{2}$', '^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_A\\d{6}_T[\\w{Lu}_]{5}_N\\d{2}\\.\\d{2}$', '^S2(A$|^B)_OPER_[\\w{Lu}_]{10}_[\\w{Lu}_]{4}_\\d{8}T\\d{6}_S\\d{8}T\\d{6}_N\\d{2}\\.\\d{2}$']]
    def validate_File_VersionType(self, value):
        # Validate type File_VersionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_File_VersionType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_File_VersionType_patterns_, ))
    validate_File_VersionType_patterns_ = [['^[0-9]{1,2}\\.[0-9]{1,2}$']]
    def validate_SystemType(self, value):
        # Validate type SystemType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S2PDGS-DPC', 'S2PDGS-MCC']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SystemType' % {"value" : value.encode("utf-8")} )
    def validate_SourceType(self, value):
        # Validate type SourceType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_SourceType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_SourceType_patterns_, ))
    validate_SourceType_patterns_ = [['^L(0$|^1A$|^1B$|^1C)_Processor$']]
    def validate_Source_Sw_VersionType(self, value):
        # Validate type Source_Sw_VersionType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Source_Sw_VersionType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Source_Sw_VersionType_patterns_, ))
    validate_Source_Sw_VersionType_patterns_ = [['^\\d{1,2}\\.\\d{1,2}(\\.\\d{1,2})*$']]
    def validate_Generation_TimeType(self, value):
        # Validate type Generation_TimeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Generation_TimeType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Generation_TimeType_patterns_, ))
    validate_Generation_TimeType_patterns_ = [['^UTC=(\\d{4}-(((01$|^03$|^05$|^07$|^08$|^10$|^12)-(0[1-9]$|^[1,2][0-9]$|^3[0,1]))$|^((04$|^06$|^09$|^11)-(0[1-9]$|^[1,2][0-9]$|^30))$|^(02-(0[1-9]$|^[1,2][0-9]))))T(([0,1][0-9]$|^2[0-3])(:[0-5][0-9]){2})(\\.\\d{6})?$']]
    def validate_Validity_StartType(self, value):
        # Validate type Validity_StartType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Validity_StartType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Validity_StartType_patterns_, ))
    validate_Validity_StartType_patterns_ = [['^UTC=(\\d{4}-(((01$|^03$|^05$|^07$|^08$|^10$|^12)-(0[1-9]$|^[1,2][0-9]$|^3[0,1]))$|^((04$|^06$|^09$|^11)-(0[1-9]$|^[1,2][0-9]$|^30))$|^(02-(0[1-9]$|^[1,2][0-9]))))T(([0,1][0-9]$|^2[0-3])(:[0-5][0-9]){2})(\\.\\d{6})?$', '^UTC=(\\d{4}-(((01$|^03$|^05$|^07$|^08$|^10$|^12)-(0[1-9]$|^[1,2][0-9]$|^3[0,1]))$|^((04$|^06$|^09$|^11)-(0[1-9]$|^[1,2][0-9]$|^30))$|^(02-(0[1-9]$|^[1,2][0-9]))))T(([0,1][0-9]$|^2[0-3])(:[0-5][0-9]){2})(\\.\\d{6})? UTC=(\\d{4}-(((01$|^03$|^05$|^07$|^08$|^10$|^12)-(0[1-9]$|^[1,2][0-9]$|^3[0,1]))$|^((04$|^06$|^09$|^11)-(0[1-9]$|^[1,2][0-9]$|^30))$|^(02-(0[1-9]$|^[1,2][0-9]))))T(([0,1][0-9]$|^2[0-3])(:[0-5][0-9]){2})(\\.\\d{6})?$']]
    def validate_Validity_StopType(self, value):
        # Validate type Validity_StopType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Validity_StopType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Validity_StopType_patterns_, ))
    validate_Validity_StopType_patterns_ = [['^UTC=(\\d{4}-(((01$|^03$|^05$|^07$|^08$|^10$|^12)-(0[1-9]$|^[1,2][0-9]$|^3[0,1]))$|^((04$|^06$|^09$|^11)-(0[1-9]$|^[1,2][0-9]$|^30))$|^(02-(0[1-9]$|^[1,2][0-9]))))T(([0,1][0-9]$|^2[0-3])(:[0-5][0-9]){2})(\\.\\d{6})?$', '^UTC=(\\d{4}-(((01$|^03$|^05$|^07$|^08$|^10$|^12)-(0[1-9]$|^[1,2][0-9]$|^3[0,1]))$|^((04$|^06$|^09$|^11)-(0[1-9]$|^[1,2][0-9]$|^30))$|^(02-(0[1-9]$|^[1,2][0-9]))))T(([0,1][0-9]$|^2[0-3])(:[0-5][0-9]){2})(\\.\\d{6})? UTC=(\\d{4}-(((01$|^03$|^05$|^07$|^08$|^10$|^12)-(0[1-9]$|^[1,2][0-9]$|^3[0,1]))$|^((04$|^06$|^09$|^11)-(0[1-9]$|^[1,2][0-9]$|^30))$|^(02-(0[1-9]$|^[1,2][0-9]))))T(([0,1][0-9]$|^2[0-3])(:[0-5][0-9]){2})(\\.\\d{6})?$']]
    def validate_Start_Orbit_NumberType(self, value):
        # Validate type Start_Orbit_NumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Start_Orbit_NumberType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Start_Orbit_NumberType_patterns_, ))
    validate_Start_Orbit_NumberType_patterns_ = [['^\\d{6}$']]
    def validate_Stop_Orbit_NumberType(self, value):
        # Validate type Stop_Orbit_NumberType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Stop_Orbit_NumberType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Stop_Orbit_NumberType_patterns_, ))
    validate_Stop_Orbit_NumberType_patterns_ = [['^\\d{6}$']]
    def validate_Quality_InfoType(self, value):
        # Validate type Quality_InfoType, a restriction on xs:float.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on Quality_InfoType' % {"value" : value} )
            if value > 100:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on Quality_InfoType' % {"value" : value} )
    def validate_File_TypeType(self, value):
        # Validate type File_TypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 10:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on File_TypeType' % {"value" : value.encode("utf-8")} )
    def validate_DetectorType(self, value):
        # Validate type DetectorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_DetectorType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_DetectorType_patterns_, ))
    validate_DetectorType_patterns_ = [['^(0[1-9])$', '^1[012]$']]
    def validate_File_ClassType(self, value):
        # Validate type File_ClassType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['RT', 'NRT', 'NOM', 'TEST-RT', 'TEST-NRT', 'TEST-NOM', 'NA']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on File_ClassType' % {"value" : value.encode("utf-8")} )
    def validate_Sensor_CodeType(self, value):
        # Validate type Sensor_CodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_Sensor_ModeType(self, value):
        # Validate type Sensor_ModeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['NOM', 'DSC', 'ABC', 'VIC', 'RAW', 'TDI', 'NA_']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Sensor_ModeType' % {"value" : value.encode("utf-8")} )
            if len(value) != 3:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on Sensor_ModeType' % {"value" : value.encode("utf-8")} )
    def validate_Acquisition_StationType(self, value):
        # Validate type Acquisition_StationType, a restriction on center:A_S2_ACQUISITION_CENTER.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['MTI_', 'SGS_', 'MPS_']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Acquisition_StationType' % {"value" : value.encode("utf-8")} )
    def validate_Processing_StationType(self, value):
        # Validate type Processing_StationType, a restriction on center:A_S2_PROCESSING_CENTRE.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_Satellite_CodeType(self, value):
        # Validate type Satellite_CodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S2A', 'S2B', 'NIL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Satellite_CodeType' % {"value" : value.encode("utf-8")} )
    def validate_Ascending_FlagType(self, value):
        # Validate type Ascending_FlagType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['true', 'false']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Ascending_FlagType' % {"value" : value.encode("utf-8")} )
    def validate_CloudPercentageType(self, value):
        # Validate type CloudPercentageType, a restriction on xs:float.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on CloudPercentageType' % {"value" : value} )
            if value > 100:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on CloudPercentageType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.File_ID is not None or
            self.Parent_ID is not None or
            self.Group_ID is not None or
            self.File_Name is not None or
            self.File_Version is not None or
            self.System is not None or
            self.Source is not None or
            self.Source_Sw_Version is not None or
            self.Generation_Time is not None or
            self.Validity_Start is not None or
            self.Validity_Stop is not None or
            self.Start_Orbit_Number is not None or
            self.Stop_Orbit_Number is not None or
            self.Geographic_Localization is not None or
            self.Quality_Info is not None or
            self.Data_Size is not None or
            self.File_Type is not None or
            self.Detector is not None or
            self.File_Class is not None or
            self.Sensor_Code is not None or
            self.Sensor_Mode is not None or
            self.Acquisition_Station is not None or
            self.Processing_Station is not None or
            self.Satellite_Code is not None or
            self.Ascending_Flag is not None or
            self.CloudPercentage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Inventory_Metadata', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Inventory_Metadata')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Inventory_Metadata')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Inventory_Metadata', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Inventory_Metadata'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Inventory_Metadata', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_ID>%s</File_ID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_ID), input_name='File_ID')), eol_))
        if self.Parent_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Parent_ID>%s</Parent_ID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Parent_ID), input_name='Parent_ID')), eol_))
        if self.Group_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Group_ID>%s</Group_ID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Group_ID), input_name='Group_ID')), eol_))
        if self.File_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name>%s</File_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Name), input_name='File_Name')), eol_))
        if self.File_Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Version>%s</File_Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Version), input_name='File_Version')), eol_))
        if self.System is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<System>%s</System>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.System), input_name='System')), eol_))
        if self.Source is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Source>%s</Source>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Source), input_name='Source')), eol_))
        if self.Source_Sw_Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Source_Sw_Version>%s</Source_Sw_Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Source_Sw_Version), input_name='Source_Sw_Version')), eol_))
        if self.Generation_Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Generation_Time>%s</Generation_Time>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Generation_Time), input_name='Generation_Time')), eol_))
        if self.Validity_Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Validity_Start>%s</Validity_Start>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Validity_Start), input_name='Validity_Start')), eol_))
        if self.Validity_Stop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Validity_Stop>%s</Validity_Stop>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Validity_Stop), input_name='Validity_Stop')), eol_))
        if self.Start_Orbit_Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Start_Orbit_Number>%s</Start_Orbit_Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Start_Orbit_Number), input_name='Start_Orbit_Number')), eol_))
        if self.Stop_Orbit_Number is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Stop_Orbit_Number>%s</Stop_Orbit_Number>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Stop_Orbit_Number), input_name='Stop_Orbit_Number')), eol_))
        if self.Geographic_Localization is not None:
            self.Geographic_Localization.export(outfile, level, namespace_, name_='Geographic_Localization', pretty_print=pretty_print)
        if self.Quality_Info is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Quality_Info>%s</Quality_Info>%s' % (self.gds_format_float(self.Quality_Info, input_name='Quality_Info'), eol_))
        if self.Data_Size is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Data_Size>%s</Data_Size>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Data_Size), input_name='Data_Size')), eol_))
        if self.File_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Type>%s</File_Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Type), input_name='File_Type')), eol_))
        if self.Detector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Detector>%s</Detector>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Detector), input_name='Detector')), eol_))
        if self.File_Class is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Class>%s</File_Class>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Class), input_name='File_Class')), eol_))
        if self.Sensor_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Sensor_Code>%s</Sensor_Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Sensor_Code), input_name='Sensor_Code')), eol_))
        if self.Sensor_Mode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Sensor_Mode>%s</Sensor_Mode>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Sensor_Mode), input_name='Sensor_Mode')), eol_))
        if self.Acquisition_Station is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Acquisition_Station>%s</Acquisition_Station>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Acquisition_Station), input_name='Acquisition_Station')), eol_))
        if self.Processing_Station is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Processing_Station>%s</Processing_Station>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Processing_Station), input_name='Processing_Station')), eol_))
        if self.Satellite_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Satellite_Code>%s</Satellite_Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Satellite_Code), input_name='Satellite_Code')), eol_))
        if self.Ascending_Flag is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Ascending_Flag>%s</Ascending_Flag>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Ascending_Flag), input_name='Ascending_Flag')), eol_))
        if self.CloudPercentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<CloudPercentage>%s</CloudPercentage>%s' % (self.gds_format_float(self.CloudPercentage, input_name='CloudPercentage'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File_ID':
            File_ID_ = child_.text
            File_ID_ = self.gds_validate_string(File_ID_, node, 'File_ID')
            self.File_ID = File_ID_
            # validate type File_IDType
            self.validate_File_IDType(self.File_ID)
        elif nodeName_ == 'Parent_ID':
            Parent_ID_ = child_.text
            Parent_ID_ = self.gds_validate_string(Parent_ID_, node, 'Parent_ID')
            self.Parent_ID = Parent_ID_
            # validate type Parent_IDType
            self.validate_Parent_IDType(self.Parent_ID)
        elif nodeName_ == 'Group_ID':
            Group_ID_ = child_.text
            Group_ID_ = self.gds_validate_string(Group_ID_, node, 'Group_ID')
            self.Group_ID = Group_ID_
            # validate type Group_IDType
            self.validate_Group_IDType(self.Group_ID)
        elif nodeName_ == 'File_Name':
            File_Name_ = child_.text
            File_Name_ = self.gds_validate_string(File_Name_, node, 'File_Name')
            self.File_Name = File_Name_
            # validate type File_NameType
            self.validate_File_NameType(self.File_Name)
        elif nodeName_ == 'File_Version':
            File_Version_ = child_.text
            File_Version_ = self.gds_validate_string(File_Version_, node, 'File_Version')
            self.File_Version = File_Version_
            # validate type File_VersionType
            self.validate_File_VersionType(self.File_Version)
        elif nodeName_ == 'System':
            System_ = child_.text
            System_ = self.gds_validate_string(System_, node, 'System')
            self.System = System_
            # validate type SystemType
            self.validate_SystemType(self.System)
        elif nodeName_ == 'Source':
            Source_ = child_.text
            Source_ = self.gds_validate_string(Source_, node, 'Source')
            self.Source = Source_
            # validate type SourceType
            self.validate_SourceType(self.Source)
        elif nodeName_ == 'Source_Sw_Version':
            Source_Sw_Version_ = child_.text
            Source_Sw_Version_ = self.gds_validate_string(Source_Sw_Version_, node, 'Source_Sw_Version')
            self.Source_Sw_Version = Source_Sw_Version_
            # validate type Source_Sw_VersionType
            self.validate_Source_Sw_VersionType(self.Source_Sw_Version)
        elif nodeName_ == 'Generation_Time':
            Generation_Time_ = child_.text
            Generation_Time_ = self.gds_validate_string(Generation_Time_, node, 'Generation_Time')
            self.Generation_Time = Generation_Time_
            # validate type Generation_TimeType
            self.validate_Generation_TimeType(self.Generation_Time)
        elif nodeName_ == 'Validity_Start':
            Validity_Start_ = child_.text
            Validity_Start_ = self.gds_validate_string(Validity_Start_, node, 'Validity_Start')
            self.Validity_Start = Validity_Start_
            # validate type Validity_StartType
            self.validate_Validity_StartType(self.Validity_Start)
        elif nodeName_ == 'Validity_Stop':
            Validity_Stop_ = child_.text
            Validity_Stop_ = self.gds_validate_string(Validity_Stop_, node, 'Validity_Stop')
            self.Validity_Stop = Validity_Stop_
            # validate type Validity_StopType
            self.validate_Validity_StopType(self.Validity_Stop)
        elif nodeName_ == 'Start_Orbit_Number':
            Start_Orbit_Number_ = child_.text
            Start_Orbit_Number_ = self.gds_validate_string(Start_Orbit_Number_, node, 'Start_Orbit_Number')
            self.Start_Orbit_Number = Start_Orbit_Number_
            # validate type Start_Orbit_NumberType
            self.validate_Start_Orbit_NumberType(self.Start_Orbit_Number)
        elif nodeName_ == 'Stop_Orbit_Number':
            Stop_Orbit_Number_ = child_.text
            Stop_Orbit_Number_ = self.gds_validate_string(Stop_Orbit_Number_, node, 'Stop_Orbit_Number')
            self.Stop_Orbit_Number = Stop_Orbit_Number_
            # validate type Stop_Orbit_NumberType
            self.validate_Stop_Orbit_NumberType(self.Stop_Orbit_Number)
        elif nodeName_ == 'Geographic_Localization':
            obj_ = Geographic_LocalizationType.factory()
            obj_.build(child_)
            self.Geographic_Localization = obj_
            obj_.original_tagname_ = 'Geographic_Localization'
        elif nodeName_ == 'Quality_Info':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Quality_Info')
            self.Quality_Info = fval_
            # validate type Quality_InfoType
            self.validate_Quality_InfoType(self.Quality_Info)
        elif nodeName_ == 'Data_Size':
            Data_Size_ = child_.text
            Data_Size_ = self.gds_validate_string(Data_Size_, node, 'Data_Size')
            self.Data_Size = Data_Size_
        elif nodeName_ == 'File_Type':
            File_Type_ = child_.text
            File_Type_ = self.gds_validate_string(File_Type_, node, 'File_Type')
            self.File_Type = File_Type_
            # validate type File_TypeType
            self.validate_File_TypeType(self.File_Type)
        elif nodeName_ == 'Detector':
            Detector_ = child_.text
            Detector_ = self.gds_validate_string(Detector_, node, 'Detector')
            self.Detector = Detector_
            # validate type DetectorType
            self.validate_DetectorType(self.Detector)
        elif nodeName_ == 'File_Class':
            File_Class_ = child_.text
            File_Class_ = self.gds_validate_string(File_Class_, node, 'File_Class')
            self.File_Class = File_Class_
            # validate type File_ClassType
            self.validate_File_ClassType(self.File_Class)
        elif nodeName_ == 'Sensor_Code':
            Sensor_Code_ = child_.text
            Sensor_Code_ = self.gds_validate_string(Sensor_Code_, node, 'Sensor_Code')
            self.Sensor_Code = Sensor_Code_
            # validate type Sensor_CodeType
            self.validate_Sensor_CodeType(self.Sensor_Code)
        elif nodeName_ == 'Sensor_Mode':
            Sensor_Mode_ = child_.text
            Sensor_Mode_ = self.gds_validate_string(Sensor_Mode_, node, 'Sensor_Mode')
            self.Sensor_Mode = Sensor_Mode_
            # validate type Sensor_ModeType
            self.validate_Sensor_ModeType(self.Sensor_Mode)
        elif nodeName_ == 'Acquisition_Station':
            Acquisition_Station_ = child_.text
            Acquisition_Station_ = self.gds_validate_string(Acquisition_Station_, node, 'Acquisition_Station')
            self.Acquisition_Station = Acquisition_Station_
            # validate type Acquisition_StationType
            self.validate_Acquisition_StationType(self.Acquisition_Station)
        elif nodeName_ == 'Processing_Station':
            Processing_Station_ = child_.text
            Processing_Station_ = self.gds_validate_string(Processing_Station_, node, 'Processing_Station')
            self.Processing_Station = Processing_Station_
            # validate type Processing_StationType
            self.validate_Processing_StationType(self.Processing_Station)
        elif nodeName_ == 'Satellite_Code':
            Satellite_Code_ = child_.text
            Satellite_Code_ = self.gds_validate_string(Satellite_Code_, node, 'Satellite_Code')
            self.Satellite_Code = Satellite_Code_
            # validate type Satellite_CodeType
            self.validate_Satellite_CodeType(self.Satellite_Code)
        elif nodeName_ == 'Ascending_Flag':
            Ascending_Flag_ = child_.text
            Ascending_Flag_ = self.gds_validate_string(Ascending_Flag_, node, 'Ascending_Flag')
            self.Ascending_Flag = Ascending_Flag_
            # validate type Ascending_FlagType
            self.validate_Ascending_FlagType(self.Ascending_Flag)
        elif nodeName_ == 'CloudPercentage':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CloudPercentage')
            self.CloudPercentage = fval_
            # validate type CloudPercentageType
            self.validate_CloudPercentageType(self.CloudPercentage)
# end class Inventory_Metadata


class A_JULIAN_DAY(GeneratedsSuper):
    """Jour julien CNES"""
    subclass = None
    superclass = None
    def __init__(self, D=None, S=None):
        self.original_tagname_ = None
        self.D = D
        self.validate_DType(self.D)
        self.S = S
        self.validate_SType(self.S)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, A_JULIAN_DAY)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if A_JULIAN_DAY.subclass:
            return A_JULIAN_DAY.subclass(*args_, **kwargs_)
        else:
            return A_JULIAN_DAY(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_D(self): return self.D
    def set_D(self, D): self.D = D
    def get_S(self): return self.S
    def set_S(self, S): self.S = S
    def validate_DType(self, value):
        # Validate type DType, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on DType' % {"value" : value} )
    def validate_SType(self, value):
        # Validate type SType, a restriction on xs:double.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on SType' % {"value" : value} )
            if value > 100000:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on SType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.D is not None or
            self.S is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='A_JULIAN_DAY', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('A_JULIAN_DAY')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='A_JULIAN_DAY')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='A_JULIAN_DAY', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='A_JULIAN_DAY'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='A_JULIAN_DAY', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.D is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<D>%s</D>%s' % (self.gds_format_integer(self.D, input_name='D'), eol_))
        if self.S is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<S>%s</S>%s' % (self.gds_format_double(self.S, input_name='S'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'D':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'D')
            self.D = ival_
            # validate type DType
            self.validate_DType(self.D)
        elif nodeName_ == 'S':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'S')
            self.S = fval_
            # validate type SType
            self.validate_SType(self.S)
# end class A_JULIAN_DAY


class Geographic_LocalizationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, GEO_TYPE=None, List_Of_Geo_Pnt=None):
        self.original_tagname_ = None
        self.GEO_TYPE = GEO_TYPE
        self.validate_GEO_TYPEType(self.GEO_TYPE)
        self.List_Of_Geo_Pnt = List_Of_Geo_Pnt
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Geographic_LocalizationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Geographic_LocalizationType.subclass:
            return Geographic_LocalizationType.subclass(*args_, **kwargs_)
        else:
            return Geographic_LocalizationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_GEO_TYPE(self): return self.GEO_TYPE
    def set_GEO_TYPE(self, GEO_TYPE): self.GEO_TYPE = GEO_TYPE
    def get_List_Of_Geo_Pnt(self): return self.List_Of_Geo_Pnt
    def set_List_Of_Geo_Pnt(self, List_Of_Geo_Pnt): self.List_Of_Geo_Pnt = List_Of_Geo_Pnt
    def validate_GEO_TYPEType(self, value):
        # Validate type GEO_TYPEType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Polygon']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on GEO_TYPEType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.GEO_TYPE is not None or
            self.List_Of_Geo_Pnt is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Geographic_LocalizationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Geographic_LocalizationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Geographic_LocalizationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Geographic_LocalizationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Geographic_LocalizationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Geographic_LocalizationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.GEO_TYPE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<GEO_TYPE>%s</GEO_TYPE>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.GEO_TYPE), input_name='GEO_TYPE')), eol_))
        if self.List_Of_Geo_Pnt is not None:
            self.List_Of_Geo_Pnt.export(outfile, level, namespace_, name_='List_Of_Geo_Pnt', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'GEO_TYPE':
            GEO_TYPE_ = child_.text
            GEO_TYPE_ = self.gds_validate_string(GEO_TYPE_, node, 'GEO_TYPE')
            self.GEO_TYPE = GEO_TYPE_
            # validate type GEO_TYPEType
            self.validate_GEO_TYPEType(self.GEO_TYPE)
        elif nodeName_ == 'List_Of_Geo_Pnt':
            obj_ = List_Of_Geo_PntType.factory()
            obj_.build(child_)
            self.List_Of_Geo_Pnt = obj_
            obj_.original_tagname_ = 'List_Of_Geo_Pnt'
# end class Geographic_LocalizationType


class List_Of_Geo_PntType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, Geo_Pnt=None):
        self.original_tagname_ = None
        self.count = _cast(int, count)
        if Geo_Pnt is None:
            self.Geo_Pnt = []
        else:
            self.Geo_Pnt = Geo_Pnt
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_Of_Geo_PntType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_Of_Geo_PntType.subclass:
            return List_Of_Geo_PntType.subclass(*args_, **kwargs_)
        else:
            return List_Of_Geo_PntType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Geo_Pnt(self): return self.Geo_Pnt
    def set_Geo_Pnt(self, Geo_Pnt): self.Geo_Pnt = Geo_Pnt
    def add_Geo_Pnt(self, value): self.Geo_Pnt.append(value)
    def insert_Geo_Pnt_at(self, index, value): self.Geo_Pnt.insert(index, value)
    def replace_Geo_Pnt_at(self, index, value): self.Geo_Pnt[index] = value
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def hasContent_(self):
        if (
            self.Geo_Pnt
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='List_Of_Geo_PntType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_Of_Geo_PntType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_Of_Geo_PntType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_Of_Geo_PntType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_Of_Geo_PntType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
    def exportChildren(self, outfile, level, namespace_='', name_='List_Of_Geo_PntType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Geo_Pnt_ in self.Geo_Pnt:
            Geo_Pnt_.export(outfile, level, namespace_, name_='Geo_Pnt', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            try:
                self.count = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.count <= 0:
                raise_parse_error(node, 'Invalid PositiveInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Geo_Pnt':
            obj_ = Geo_PntType.factory()
            obj_.build(child_)
            self.Geo_Pnt.append(obj_)
            obj_.original_tagname_ = 'Geo_Pnt'
# end class List_Of_Geo_PntType


class Geo_PntType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LATITUDE=None, LONGITUDE=None):
        self.original_tagname_ = None
        self.LATITUDE = LATITUDE
        self.validate_LATITUDEType(self.LATITUDE)
        self.LONGITUDE = LONGITUDE
        self.validate_LONGITUDEType(self.LONGITUDE)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Geo_PntType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Geo_PntType.subclass:
            return Geo_PntType.subclass(*args_, **kwargs_)
        else:
            return Geo_PntType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LATITUDE(self): return self.LATITUDE
    def set_LATITUDE(self, LATITUDE): self.LATITUDE = LATITUDE
    def get_LONGITUDE(self): return self.LONGITUDE
    def set_LONGITUDE(self, LONGITUDE): self.LONGITUDE = LONGITUDE
    def validate_LATITUDEType(self, value):
        # Validate type LATITUDEType, a restriction on xs:float.
        if value is not None and Validate_simpletypes_:
            if value < -90:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on LATITUDEType' % {"value" : value} )
            if value > +90:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on LATITUDEType' % {"value" : value} )
    def validate_LONGITUDEType(self, value):
        # Validate type LONGITUDEType, a restriction on xs:float.
        if value is not None and Validate_simpletypes_:
            if value < -180:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on LONGITUDEType' % {"value" : value} )
            if value >= +180:
                warnings_.warn('Value "%(value)s" does not match xsd maxExclusive restriction on LONGITUDEType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.LATITUDE is not None or
            self.LONGITUDE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Geo_PntType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Geo_PntType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Geo_PntType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Geo_PntType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Geo_PntType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Geo_PntType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LATITUDE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LATITUDE>%s</LATITUDE>%s' % (self.gds_format_float(self.LATITUDE, input_name='LATITUDE'), eol_))
        if self.LONGITUDE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<LONGITUDE>%s</LONGITUDE>%s' % (self.gds_format_float(self.LONGITUDE, input_name='LONGITUDE'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LATITUDE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LATITUDE')
            self.LATITUDE = fval_
            # validate type LATITUDEType
            self.validate_LATITUDEType(self.LATITUDE)
        elif nodeName_ == 'LONGITUDE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LONGITUDE')
            self.LONGITUDE = fval_
            # validate type LONGITUDEType
            self.validate_LONGITUDEType(self.LONGITUDE)
# end class Geo_PntType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Inventory_Metadata'
        rootClass = Inventory_Metadata
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Inventory_Metadata'
        rootClass = Inventory_Metadata
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Inventory_Metadata'
        rootClass = Inventory_Metadata
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Inventory_Metadata'
        rootClass = Inventory_Metadata
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from inventory import *\n\n')
        sys.stdout.write('import inventory as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "A_JULIAN_DAY",
    "Geo_PntType",
    "Geographic_LocalizationType",
    "Inventory_Metadata",
    "List_Of_Geo_PntType"
]

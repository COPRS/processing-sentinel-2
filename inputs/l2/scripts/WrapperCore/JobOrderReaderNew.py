#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Mon Jun 15 08:33:56 2020 by generateDS.py version 2.29.2.
# Python 2.7.14 (default, Dec  5 2017, 13:55:53)  [GCC 4.4.7 20120313 (Red Hat 4.4.7-18)]
#
# Command line options:
#   ('-o', 'JobOrderReaderNew.py')
#
# Command line arguments:
#   /DATA1/besquis/IPF/ipf_libcommon/data/xsd/VALIDATION_SCHEMAS/ICD/DICO/1.0/IPF/job/Generic_JobOrder.xsd
#
# Command line:
#   /usr/local/bin/generateDS.py -o "JobOrderReaderNew.py" /DATA1/besquis/IPF/ipf_libcommon/data/xsd/VALIDATION_SCHEMAS/ICD/DICO/1.0/IPF/job/Generic_JobOrder.xsd
#
# Current working directory (os.getcwd()):
#   WrapperCore
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = False
BaseStrType_ = basestring


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            return instring.encode(ExternalEncoding)
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class Processing_Parameter(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Value=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Processing_Parameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Processing_Parameter.subclass:
            return Processing_Parameter.subclass(*args_, **kwargs_)
        else:
            return Processing_Parameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Processing_Parameter', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Processing_Parameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Processing_Parameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Processing_Parameter', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Processing_Parameter'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Processing_Parameter', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Value>%s</Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class Processing_Parameter


class Ipf_Proc(GeneratedsSuper):
    """Execution Parameter of one task"""
    subclass = None
    superclass = None
    def __init__(self, Task_Name=None, Task_Version=None, Breakpoint=None, List_of_Inputs=None, List_of_Outputs=None):
        self.original_tagname_ = None
        self.Task_Name = Task_Name
        self.validate_A_IDP_SC_NAME(self.Task_Name)
        self.Task_Version = Task_Version
        self.Breakpoint = Breakpoint
        self.List_of_Inputs = List_of_Inputs
        self.List_of_Outputs = List_of_Outputs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Ipf_Proc)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Ipf_Proc.subclass:
            return Ipf_Proc.subclass(*args_, **kwargs_)
        else:
            return Ipf_Proc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Task_Name(self): return self.Task_Name
    def set_Task_Name(self, Task_Name): self.Task_Name = Task_Name
    def get_Task_Version(self): return self.Task_Version
    def set_Task_Version(self, Task_Version): self.Task_Version = Task_Version
    def get_Breakpoint(self): return self.Breakpoint
    def set_Breakpoint(self, Breakpoint): self.Breakpoint = Breakpoint
    def get_List_of_Inputs(self): return self.List_of_Inputs
    def set_List_of_Inputs(self, List_of_Inputs): self.List_of_Inputs = List_of_Inputs
    def get_List_of_Outputs(self): return self.List_of_Outputs
    def set_List_of_Outputs(self, List_of_Outputs): self.List_of_Outputs = List_of_Outputs
    def validate_A_IDP_SC_NAME(self, value):
        # Validate type A_IDP_SC_NAME, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INIT_LOC_L0', 'QL_GEO', 'QL_CLOUD_MASK', 'FORMAT_IMG_QL_L0', 'FORMAT_ISP', 'FORMAT_METADATA_GR_L0C', 'FORMAT_METADATA_DS_L0C', 'UNFORMAT_SAFE_GR', 'UNFORMAT_SAFE_DS', 'UPDATE_LOC', 'QL_DECOMP', 'QL_CLOUD_MASK', 'INIT_LOC_L1', 'DECOMP', 'RADIO_AB', 'RADIO_FINALIZE', 'FORMAT_METADATA_GR_L1A', 'FORMAT_METADATA_DS_L1A', 'FORMAT_IMG_L1A', 'GET_GRI', 'UNFORMAT_GRI', 'INIT_VS_GEO', 'RESAMPLE_TO_VS', 'TP_COLLECT', 'TP_FILTER', 'SPATIO', 'GEO1B_FINALIZE', 'FORMAT_METADATA_GR_L1B', 'FORMAT_METADATA_DS_L1B', 'FORMAT_IMG_L1B', 'GET_TILE_LIST', 'TILE_INIT', 'GEN_ORTHO_TOA', 'TILE_FINALIZE', 'MASK_S2', 'FORMAT_IMG_L1C', 'FORMAT_IMG_PVI_TCI', 'FORMAT_METADATA_TILE_L1C', 'FORMAT_METADATA_DS_L1C', 'OLQC', 'FORMAT_METADATA_TILE_L2A', 'FORMAT_METADATA_DS_L2A']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on A_IDP_SC_NAME' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Task_Name is not None or
            self.Task_Version is not None or
            self.Breakpoint is not None or
            self.List_of_Inputs is not None or
            self.List_of_Outputs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Ipf_Proc', namespacedef_=' xmlns:ipf_base="http://gs2.esa.int/DICO/1.0/IPF/base/" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Ipf_Proc')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Ipf_Proc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Ipf_Proc', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Ipf_Proc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Ipf_Proc', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Task_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Task_Name>%s</Task_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Task_Name), input_name='Task_Name')), eol_))
        if self.Task_Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Task_Version>%s</Task_Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Task_Version), input_name='Task_Version')), eol_))
        if self.Breakpoint is not None:
            self.Breakpoint.export(outfile, level, namespace_, name_='Breakpoint', pretty_print=pretty_print)
        if self.List_of_Inputs is not None:
            self.List_of_Inputs.export(outfile, level, namespace_, name_='List_of_Inputs', pretty_print=pretty_print)
        if self.List_of_Outputs is not None:
            self.List_of_Outputs.export(outfile, level, namespace_, name_='List_of_Outputs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Task_Name':
            Task_Name_ = child_.text
            Task_Name_ = self.gds_validate_string(Task_Name_, node, 'Task_Name')
            self.Task_Name = Task_Name_
            # validate type A_IDP_SC_NAME
            self.validate_A_IDP_SC_NAME(self.Task_Name)
        elif nodeName_ == 'Task_Version':
            Task_Version_ = child_.text
            Task_Version_ = self.gds_validate_string(Task_Version_, node, 'Task_Version')
            self.Task_Version = Task_Version_
        elif nodeName_ == 'Breakpoint':
            obj_ = BreakpointType.factory()
            obj_.build(child_)
            self.Breakpoint = obj_
            obj_.original_tagname_ = 'Breakpoint'
        elif nodeName_ == 'List_of_Inputs':
            obj_ = List_of_InputsType.factory()
            obj_.build(child_)
            self.List_of_Inputs = obj_
            obj_.original_tagname_ = 'List_of_Inputs'
        elif nodeName_ == 'List_of_Outputs':
            obj_ = List_of_OutputsType.factory()
            obj_.build(child_)
            self.List_of_Outputs = obj_
            obj_.original_tagname_ = 'List_of_Outputs'
# end class Ipf_Proc


class Ipf_Job_OrderType(GeneratedsSuper):
    """Job Order Type"""
    subclass = None
    superclass = None
    def __init__(self, Ipf_Conf=None, List_of_Ipf_Procs=None):
        self.original_tagname_ = None
        self.Ipf_Conf = Ipf_Conf
        self.List_of_Ipf_Procs = List_of_Ipf_Procs
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Ipf_Job_OrderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Ipf_Job_OrderType.subclass:
            return Ipf_Job_OrderType.subclass(*args_, **kwargs_)
        else:
            return Ipf_Job_OrderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Ipf_Conf(self): return self.Ipf_Conf
    def set_Ipf_Conf(self, Ipf_Conf): self.Ipf_Conf = Ipf_Conf
    def get_List_of_Ipf_Procs(self): return self.List_of_Ipf_Procs
    def set_List_of_Ipf_Procs(self, List_of_Ipf_Procs): self.List_of_Ipf_Procs = List_of_Ipf_Procs
    def hasContent_(self):
        if (
            self.Ipf_Conf is not None or
            self.List_of_Ipf_Procs is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Ipf_Job_OrderType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Ipf_Job_OrderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Ipf_Job_OrderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Ipf_Job_OrderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Ipf_Job_OrderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Ipf_Job_OrderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Ipf_Conf is not None:
            self.Ipf_Conf.export(outfile, level, namespace_, name_='Ipf_Conf', pretty_print=pretty_print)
        if self.List_of_Ipf_Procs is not None:
            self.List_of_Ipf_Procs.export(outfile, level, namespace_, name_='List_of_Ipf_Procs', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Ipf_Conf':
            obj_ = Ipf_ConfType.factory()
            obj_.build(child_)
            self.Ipf_Conf = obj_
            obj_.original_tagname_ = 'Ipf_Conf'
        elif nodeName_ == 'List_of_Ipf_Procs':
            obj_ = List_of_Ipf_ProcsType.factory()
            obj_.build(child_)
            self.List_of_Ipf_Procs = obj_
            obj_.original_tagname_ = 'List_of_Ipf_Procs'
# end class Ipf_Job_OrderType


class Param_Info(GeneratedsSuper):
    """IPF parameters information"""
    subclass = None
    superclass = None
    def __init__(self, Name=None, Value=None):
        self.original_tagname_ = None
        self.Name = Name
        self.Value = Value
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Param_Info)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Param_Info.subclass:
            return Param_Info.subclass(*args_, **kwargs_)
        else:
            return Param_Info(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Value(self): return self.Value
    def set_Value(self, Value): self.Value = Value
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Param_Info', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Param_Info')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Param_Info')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Param_Info', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Param_Info'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Param_Info', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Name>%s</Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Name), input_name='Name')), eol_))
        if self.Value is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Value>%s</Value>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Value), input_name='Value')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Value':
            Value_ = child_.text
            Value_ = self.gds_validate_string(Value_, node, 'Value')
            self.Value = Value_
# end class Param_Info


class A_MESSAGE(GeneratedsSuper):
    """Message formatted in conformance as the log message format"""
    subclass = None
    superclass = None
    def __init__(self, Function_Name=None, Message_Code=None, Text=None, Date_Time=None, Node_Name=None, Processor_Name=None, Processor_Version=None, Type=None):
        self.original_tagname_ = None
        self.Function_Name = Function_Name
        self.Message_Code = Message_Code
        self.Text = Text
        if isinstance(Date_Time, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Date_Time, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Date_Time
        self.Date_Time = initvalue_
        self.Node_Name = Node_Name
        self.Processor_Name = Processor_Name
        self.validate_A_IDP_SC_NAME(self.Processor_Name)
        self.Processor_Version = Processor_Version
        self.validate_A_DPC_WORKFLOW_VERSION(self.Processor_Version)
        self.Type = Type
        self.validate_TypeType(self.Type)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, A_MESSAGE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if A_MESSAGE.subclass:
            return A_MESSAGE.subclass(*args_, **kwargs_)
        else:
            return A_MESSAGE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Function_Name(self): return self.Function_Name
    def set_Function_Name(self, Function_Name): self.Function_Name = Function_Name
    def get_Message_Code(self): return self.Message_Code
    def set_Message_Code(self, Message_Code): self.Message_Code = Message_Code
    def get_Text(self): return self.Text
    def set_Text(self, Text): self.Text = Text
    def get_Date_Time(self): return self.Date_Time
    def set_Date_Time(self, Date_Time): self.Date_Time = Date_Time
    def get_Node_Name(self): return self.Node_Name
    def set_Node_Name(self, Node_Name): self.Node_Name = Node_Name
    def get_Processor_Name(self): return self.Processor_Name
    def set_Processor_Name(self, Processor_Name): self.Processor_Name = Processor_Name
    def get_Processor_Version(self): return self.Processor_Version
    def set_Processor_Version(self, Processor_Version): self.Processor_Version = Processor_Version
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def validate_A_IDP_SC_NAME(self, value):
        # Validate type A_IDP_SC_NAME, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INIT_LOC_L0', 'QL_GEO', 'QL_CLOUD_MASK', 'FORMAT_IMG_QL_L0', 'FORMAT_ISP', 'FORMAT_METADATA_GR_L0C', 'FORMAT_METADATA_DS_L0C', 'UNFORMAT_SAFE_GR', 'UNFORMAT_SAFE_DS', 'UPDATE_LOC', 'QL_DECOMP', 'QL_CLOUD_MASK', 'INIT_LOC_L1', 'DECOMP', 'RADIO_AB', 'RADIO_FINALIZE', 'FORMAT_METADATA_GR_L1A', 'FORMAT_METADATA_DS_L1A', 'FORMAT_IMG_L1A', 'GET_GRI', 'UNFORMAT_GRI', 'INIT_VS_GEO', 'RESAMPLE_TO_VS', 'TP_COLLECT', 'TP_FILTER', 'SPATIO', 'GEO1B_FINALIZE', 'FORMAT_METADATA_GR_L1B', 'FORMAT_METADATA_DS_L1B', 'FORMAT_IMG_L1B', 'GET_TILE_LIST', 'TILE_INIT', 'GEN_ORTHO_TOA', 'TILE_FINALIZE', 'MASK_S2', 'FORMAT_IMG_L1C', 'FORMAT_IMG_PVI_TCI', 'FORMAT_METADATA_TILE_L1C', 'FORMAT_METADATA_DS_L1C', 'OLQC', 'FORMAT_METADATA_TILE_L2A', 'FORMAT_METADATA_DS_L2A']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on A_IDP_SC_NAME' % {"value" : value.encode("utf-8")} )
    def validate_A_DPC_WORKFLOW_VERSION(self, value):
        # Validate type A_DPC_WORKFLOW_VERSION, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_A_DPC_WORKFLOW_VERSION_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_A_DPC_WORKFLOW_VERSION_patterns_, ))
    validate_A_DPC_WORKFLOW_VERSION_patterns_ = [['^\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}$']]
    def validate_TypeType(self, value):
        # Validate type TypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DEBUG', 'INFORMATION', 'PROGRESS', 'WARNING', 'ERROR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on TypeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Function_Name is not None or
            self.Message_Code is not None or
            self.Text is not None or
            self.Date_Time is not None or
            self.Node_Name is not None or
            self.Processor_Name is not None or
            self.Processor_Version is not None or
            self.Type is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='A_MESSAGE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('A_MESSAGE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='A_MESSAGE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='A_MESSAGE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='A_MESSAGE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='A_MESSAGE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Function_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Function_Name>%s</Function_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Function_Name), input_name='Function_Name')), eol_))
        if self.Message_Code is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Message_Code>%s</Message_Code>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Message_Code), input_name='Message_Code')), eol_))
        if self.Text is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Text>%s</Text>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Text), input_name='Text')), eol_))
        if self.Date_Time is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Date_Time>%s</Date_Time>%s' % (self.gds_format_datetime(self.Date_Time, input_name='Date_Time'), eol_))
        if self.Node_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Node_Name>%s</Node_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Node_Name), input_name='Node_Name')), eol_))
        if self.Processor_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Processor_Name>%s</Processor_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Processor_Name), input_name='Processor_Name')), eol_))
        if self.Processor_Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Processor_Version>%s</Processor_Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Processor_Version), input_name='Processor_Version')), eol_))
        if self.Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Type>%s</Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Type), input_name='Type')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Function_Name':
            Function_Name_ = child_.text
            Function_Name_ = self.gds_validate_string(Function_Name_, node, 'Function_Name')
            self.Function_Name = Function_Name_
        elif nodeName_ == 'Message_Code':
            Message_Code_ = child_.text
            Message_Code_ = self.gds_validate_string(Message_Code_, node, 'Message_Code')
            self.Message_Code = Message_Code_
        elif nodeName_ == 'Text':
            Text_ = child_.text
            Text_ = self.gds_validate_string(Text_, node, 'Text')
            self.Text = Text_
        elif nodeName_ == 'Date_Time':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Date_Time = dval_
        elif nodeName_ == 'Node_Name':
            Node_Name_ = child_.text
            Node_Name_ = self.gds_validate_string(Node_Name_, node, 'Node_Name')
            self.Node_Name = Node_Name_
        elif nodeName_ == 'Processor_Name':
            Processor_Name_ = child_.text
            Processor_Name_ = self.gds_validate_string(Processor_Name_, node, 'Processor_Name')
            self.Processor_Name = Processor_Name_
            # validate type A_IDP_SC_NAME
            self.validate_A_IDP_SC_NAME(self.Processor_Name)
        elif nodeName_ == 'Processor_Version':
            Processor_Version_ = child_.text
            Processor_Version_ = self.gds_validate_string(Processor_Version_, node, 'Processor_Version')
            self.Processor_Version = Processor_Version_
            # validate type A_DPC_WORKFLOW_VERSION
            self.validate_A_DPC_WORKFLOW_VERSION(self.Processor_Version)
        elif nodeName_ == 'Type':
            Type_ = child_.text
            Type_ = self.gds_validate_string(Type_, node, 'Type')
            self.Type = Type_
            # validate type TypeType
            self.validate_TypeType(self.Type)
# end class A_MESSAGE


class A_JULIAN_DAY(GeneratedsSuper):
    """Jour julien CNES"""
    subclass = None
    superclass = None
    def __init__(self, D=None, S=None):
        self.original_tagname_ = None
        self.D = D
        self.validate_DType(self.D)
        self.S = S
        self.validate_SType(self.S)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, A_JULIAN_DAY)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if A_JULIAN_DAY.subclass:
            return A_JULIAN_DAY.subclass(*args_, **kwargs_)
        else:
            return A_JULIAN_DAY(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_D(self): return self.D
    def set_D(self, D): self.D = D
    def get_S(self): return self.S
    def set_S(self, S): self.S = S
    def validate_DType(self, value):
        # Validate type DType, a restriction on xs:int.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on DType' % {"value" : value} )
    def validate_SType(self, value):
        # Validate type SType, a restriction on xs:double.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on SType' % {"value" : value} )
            if value > 100000:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on SType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.D is not None or
            self.S is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='A_JULIAN_DAY', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('A_JULIAN_DAY')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='A_JULIAN_DAY')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='A_JULIAN_DAY', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='A_JULIAN_DAY'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='A_JULIAN_DAY', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.D is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<D>%s</D>%s' % (self.gds_format_integer(self.D, input_name='D'), eol_))
        if self.S is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<S>%s</S>%s' % (self.gds_format_double(self.S, input_name='S'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'D':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'D')
            self.D = ival_
            # validate type DType
            self.validate_DType(self.D)
        elif nodeName_ == 'S':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'S')
            self.S = fval_
            # validate type SType
            self.validate_SType(self.S)
# end class A_JULIAN_DAY


class BreakpointType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, List_of_Brk_Files=None):
        self.original_tagname_ = None
        self.List_of_Brk_Files = List_of_Brk_Files
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, BreakpointType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if BreakpointType.subclass:
            return BreakpointType.subclass(*args_, **kwargs_)
        else:
            return BreakpointType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_List_of_Brk_Files(self): return self.List_of_Brk_Files
    def set_List_of_Brk_Files(self, List_of_Brk_Files): self.List_of_Brk_Files = List_of_Brk_Files
    def hasContent_(self):
        if (
            self.List_of_Brk_Files is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='BreakpointType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('BreakpointType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BreakpointType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='BreakpointType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BreakpointType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BreakpointType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.List_of_Brk_Files is not None:
            self.List_of_Brk_Files.export(outfile, level, namespace_, name_='List_of_Brk_Files', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'List_of_Brk_Files':
            obj_ = List_of_Brk_FilesType.factory()
            obj_.build(child_)
            self.List_of_Brk_Files = obj_
            obj_.original_tagname_ = 'List_of_Brk_Files'
# end class BreakpointType


class List_of_Brk_FilesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, Brk_File=None):
        self.original_tagname_ = None
        self.count = _cast(int, count)
        if Brk_File is None:
            self.Brk_File = []
        else:
            self.Brk_File = Brk_File
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_of_Brk_FilesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_of_Brk_FilesType.subclass:
            return List_of_Brk_FilesType.subclass(*args_, **kwargs_)
        else:
            return List_of_Brk_FilesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Brk_File(self): return self.Brk_File
    def set_Brk_File(self, Brk_File): self.Brk_File = Brk_File
    def add_Brk_File(self, value): self.Brk_File.append(value)
    def insert_Brk_File_at(self, index, value): self.Brk_File.insert(index, value)
    def replace_Brk_File_at(self, index, value): self.Brk_File[index] = value
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def hasContent_(self):
        if (
            self.Brk_File
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='List_of_Brk_FilesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_of_Brk_FilesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_Brk_FilesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_Brk_FilesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_Brk_FilesType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
    def exportChildren(self, outfile, level, namespace_='', name_='List_of_Brk_FilesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Brk_File_ in self.Brk_File:
            Brk_File_.export(outfile, level, namespace_, name_='Brk_File', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            try:
                self.count = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.count <= 0:
                raise_parse_error(node, 'Invalid PositiveInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Brk_File':
            obj_ = Brk_FileType.factory()
            obj_.build(child_)
            self.Brk_File.append(obj_)
            obj_.original_tagname_ = 'Brk_File'
# end class List_of_Brk_FilesType


class Brk_FileType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Enable='OFF', File_Type=None, File_Name_Type=None, File_Name=None):
        self.original_tagname_ = None
        self.Enable = Enable
        self.validate_EnableType(self.Enable)
        if File_Type is None:
            self.File_Type = []
        else:
            self.File_Type = File_Type
        if File_Name_Type is None:
            self.File_Name_Type = []
        else:
            self.File_Name_Type = File_Name_Type
        if File_Name is None:
            self.File_Name = []
        else:
            self.File_Name = File_Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Brk_FileType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Brk_FileType.subclass:
            return Brk_FileType.subclass(*args_, **kwargs_)
        else:
            return Brk_FileType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Enable(self): return self.Enable
    def set_Enable(self, Enable): self.Enable = Enable
    def get_File_Type(self): return self.File_Type
    def set_File_Type(self, File_Type): self.File_Type = File_Type
    def add_File_Type(self, value): self.File_Type.append(value)
    def insert_File_Type_at(self, index, value): self.File_Type.insert(index, value)
    def replace_File_Type_at(self, index, value): self.File_Type[index] = value
    def get_File_Name_Type(self): return self.File_Name_Type
    def set_File_Name_Type(self, File_Name_Type): self.File_Name_Type = File_Name_Type
    def add_File_Name_Type(self, value): self.File_Name_Type.append(value)
    def insert_File_Name_Type_at(self, index, value): self.File_Name_Type.insert(index, value)
    def replace_File_Name_Type_at(self, index, value): self.File_Name_Type[index] = value
    def get_File_Name(self): return self.File_Name
    def set_File_Name(self, File_Name): self.File_Name = File_Name
    def add_File_Name(self, value): self.File_Name.append(value)
    def insert_File_Name_at(self, index, value): self.File_Name.insert(index, value)
    def replace_File_Name_at(self, index, value): self.File_Name[index] = value
    def validate_EnableType(self, value):
        # Validate type EnableType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ON', 'OFF']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on EnableType' % {"value" : value.encode("utf-8")} )
    def validate_File_TypeType(self, value):
        # Validate type File_TypeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_A_FILE_NAME_TYPE(self, value):
        # Validate type A_FILE_NAME_TYPE, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Physical', 'Logical', 'Stem', 'Directory', 'Regexp', 'Prefix']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on A_FILE_NAME_TYPE' % {"value" : value.encode("utf-8")} )
    def validate_File_NameType(self, value):
        # Validate type File_NameType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.Enable != "OFF" or
            self.File_Type or
            self.File_Name_Type or
            self.File_Name
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Brk_FileType', namespacedef_=' xmlns:ipf_base="http://gs2.esa.int/DICO/1.0/IPF/base/" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Brk_FileType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Brk_FileType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Brk_FileType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Brk_FileType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Brk_FileType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Enable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Enable>%s</Enable>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Enable), input_name='Enable')), eol_))
        for File_Type_ in self.File_Type:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Type>%s</File_Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(File_Type_), input_name='File_Type')), eol_))
        for File_Name_Type_ in self.File_Name_Type:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name_Type>%s</File_Name_Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(File_Name_Type_), input_name='File_Name_Type')), eol_))
        for File_Name_ in self.File_Name:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name>%s</File_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(File_Name_), input_name='File_Name')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Enable':
            Enable_ = child_.text
            Enable_ = self.gds_validate_string(Enable_, node, 'Enable')
            self.Enable = Enable_
            # validate type EnableType
            self.validate_EnableType(self.Enable)
        elif nodeName_ == 'File_Type':
            File_Type_ = child_.text
            File_Type_ = self.gds_validate_string(File_Type_, node, 'File_Type')
            self.File_Type.append(File_Type_)
            # validate type File_TypeType
            self.validate_File_TypeType(self.File_Type[-1])
        elif nodeName_ == 'File_Name_Type':
            File_Name_Type_ = child_.text
            File_Name_Type_ = self.gds_validate_string(File_Name_Type_, node, 'File_Name_Type')
            self.File_Name_Type.append(File_Name_Type_)
            # validate type A_FILE_NAME_TYPE
            self.validate_A_FILE_NAME_TYPE(self.File_Name_Type[-1])
        elif nodeName_ == 'File_Name':
            File_Name_ = child_.text
            File_Name_ = self.gds_validate_string(File_Name_, node, 'File_Name')
            self.File_Name.append(File_Name_)
            # validate type File_NameType
            self.validate_File_NameType(self.File_Name[-1])
# end class Brk_FileType


class List_of_InputsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, Input=None):
        self.original_tagname_ = None
        self.count = _cast(int, count)
        if Input is None:
            self.Input = []
        else:
            self.Input = Input
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_of_InputsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_of_InputsType.subclass:
            return List_of_InputsType.subclass(*args_, **kwargs_)
        else:
            return List_of_InputsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Input(self): return self.Input
    def set_Input(self, Input): self.Input = Input
    def add_Input(self, value): self.Input.append(value)
    def insert_Input_at(self, index, value): self.Input.insert(index, value)
    def replace_Input_at(self, index, value): self.Input[index] = value
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def hasContent_(self):
        if (
            self.Input
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='List_of_InputsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_of_InputsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_InputsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_InputsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_InputsType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
    def exportChildren(self, outfile, level, namespace_='', name_='List_of_InputsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Input_ in self.Input:
            Input_.export(outfile, level, namespace_, name_='Input', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            try:
                self.count = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.count < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Input':
            obj_ = InputType.factory()
            obj_.build(child_)
            self.Input.append(obj_)
            obj_.original_tagname_ = 'Input'
# end class List_of_InputsType


class InputType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, File_Type=None, File_Name_Type='Physical', List_of_File_Names=None, List_of_Time_Intervals=None):
        self.original_tagname_ = None
        self.File_Type = File_Type
        self.validate_S2_FILE_TYPE_INPUT(self.File_Type)
        self.File_Name_Type = File_Name_Type
        self.validate_A_FILE_NAME_TYPE(self.File_Name_Type)
        self.List_of_File_Names = List_of_File_Names
        self.List_of_Time_Intervals = List_of_Time_Intervals
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InputType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InputType.subclass:
            return InputType.subclass(*args_, **kwargs_)
        else:
            return InputType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File_Type(self): return self.File_Type
    def set_File_Type(self, File_Type): self.File_Type = File_Type
    def get_File_Name_Type(self): return self.File_Name_Type
    def set_File_Name_Type(self, File_Name_Type): self.File_Name_Type = File_Name_Type
    def get_List_of_File_Names(self): return self.List_of_File_Names
    def set_List_of_File_Names(self, List_of_File_Names): self.List_of_File_Names = List_of_File_Names
    def get_List_of_Time_Intervals(self): return self.List_of_Time_Intervals
    def set_List_of_Time_Intervals(self, List_of_Time_Intervals): self.List_of_Time_Intervals = List_of_Time_Intervals
    def validate_S2_FILE_TYPE_INPUT(self, value):
        # Validate type S2_FILE_TYPE_INPUT, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['WORKING', 'PERSISTENT_RESOURCES', 'VIRTUAL_SENSOR', 'PDI_SAD', 'PDI_GR', 'PDI_GR_LIST', 'PDI_DS', 'PDI_DS_GR_LIST', 'PDI_DS_TILE_LIST', 'PDI_SAFE', 'PDI_ATF', 'PDI_ATF_LIST', 'ISP_UNCOMP_LIST', 'ISP_LIST', 'VECTOR', 'VECTOR_DS_FOOTPRINT', 'DEM_GLOBE', 'DEM_SRTM', 'DEM_GEOID', 'DEM', 'GRI_ORBIT', 'ECMWF', 'IERS', 'POD', 'QUICKLOOK', 'QUICKLOOK_GEO', 'QUICKLOOK_CM', 'GIP_ATMIMA', 'GIP_ATMSAD', 'GIP_DATATI', 'GIP_LREXTR', 'GIP_INVLOC', 'GIP_VIEDIR', 'GIP_SPAMOD', 'GIP_BLINDP', 'GIP_CLOINV', 'GIP_CONVER', 'GIP_PRDLOC', 'GIP_R2PARA', 'GIP_R2SWIR', 'GIP_R2EQOB', 'GIP_R2EQOG', 'GIP_R2DEPI', 'GIP_R2DEFI', 'GIP_R2WAFI', 'GIP_R2DEBA', 'GIP_R2L2NC', 'GIP_R2DENT', 'GIP_R2DECT', 'GIP_R2MACO', 'GIP_R2NOMO', 'GIP_R2ABCA', 'GIP_R2BINN', 'GIP_R2CRCO', 'GIP_G2PARA', 'GIP_G2PARE', 'GIP_EARMOD', 'GIP_GEOPAR', 'GIP_INTDET', 'GIP_TILPAR', 'GIP_RESPAR', 'GIP_MASPAR', 'GIP_CLOPAR', 'GIP_JP2KPA', 'GIP_OLQCPA', 'GIP_GENPAR', 'GIP_DECOMP', 'GIP_ECMWFP', 'GIP_PROBAS', 'IDP_INFOS', 'TIE_POINTS', 'HOMOLOG_POINTS_LIST', 'GCP_POINTS', 'FRAME_FILE', 'GRI_LIST_FILE', 'TILE_LIST_FILE', 'SEGMENTATION_FILE', 'PDI_DS_L1A', 'PDI_DS_L1B', 'PDI_DS_GR_L1A_LIST', 'ISP_INFOS', 'GIP_PVIPAR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on S2_FILE_TYPE_INPUT' % {"value" : value.encode("utf-8")} )
    def validate_A_FILE_NAME_TYPE(self, value):
        # Validate type A_FILE_NAME_TYPE, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Physical', 'Logical', 'Stem', 'Directory', 'Regexp', 'Prefix']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on A_FILE_NAME_TYPE' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.File_Type is not None or
            self.File_Name_Type != "Physical" or
            self.List_of_File_Names is not None or
            self.List_of_Time_Intervals is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='InputType', namespacedef_=' xmlns:ipf_base="http://gs2.esa.int/DICO/1.0/IPF/base/" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InputType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InputType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InputType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InputType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InputType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Type>%s</File_Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Type), input_name='File_Type')), eol_))
        if self.File_Name_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name_Type>%s</File_Name_Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Name_Type), input_name='File_Name_Type')), eol_))
        if self.List_of_File_Names is not None:
            self.List_of_File_Names.export(outfile, level, namespace_, name_='List_of_File_Names', pretty_print=pretty_print)
        if self.List_of_Time_Intervals is not None:
            self.List_of_Time_Intervals.export(outfile, level, namespace_, name_='List_of_Time_Intervals', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File_Type':
            File_Type_ = child_.text
            File_Type_ = self.gds_validate_string(File_Type_, node, 'File_Type')
            self.File_Type = File_Type_
            # validate type S2_FILE_TYPE_INPUT
            self.validate_S2_FILE_TYPE_INPUT(self.File_Type)
        elif nodeName_ == 'File_Name_Type':
            File_Name_Type_ = child_.text
            File_Name_Type_ = self.gds_validate_string(File_Name_Type_, node, 'File_Name_Type')
            self.File_Name_Type = File_Name_Type_
            # validate type A_FILE_NAME_TYPE
            self.validate_A_FILE_NAME_TYPE(self.File_Name_Type)
        elif nodeName_ == 'List_of_File_Names':
            obj_ = List_of_File_NamesType.factory()
            obj_.build(child_)
            self.List_of_File_Names = obj_
            obj_.original_tagname_ = 'List_of_File_Names'
        elif nodeName_ == 'List_of_Time_Intervals':
            obj_ = List_of_Time_IntervalsType.factory()
            obj_.build(child_)
            self.List_of_Time_Intervals = obj_
            obj_.original_tagname_ = 'List_of_Time_Intervals'
# end class InputType


class List_of_File_NamesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, File_Name=None):
        self.original_tagname_ = None
        self.count = _cast(int, count)
        if File_Name is None:
            self.File_Name = []
        else:
            self.File_Name = File_Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_of_File_NamesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_of_File_NamesType.subclass:
            return List_of_File_NamesType.subclass(*args_, **kwargs_)
        else:
            return List_of_File_NamesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File_Name(self): return self.File_Name
    def set_File_Name(self, File_Name): self.File_Name = File_Name
    def add_File_Name(self, value): self.File_Name.append(value)
    def insert_File_Name_at(self, index, value): self.File_Name.insert(index, value)
    def replace_File_Name_at(self, index, value): self.File_Name[index] = value
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def hasContent_(self):
        if (
            self.File_Name
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='List_of_File_NamesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_of_File_NamesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_File_NamesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_File_NamesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_File_NamesType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
    def exportChildren(self, outfile, level, namespace_='', name_='List_of_File_NamesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for File_Name_ in self.File_Name:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name>%s</File_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(File_Name_), input_name='File_Name')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            try:
                self.count = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.count <= 0:
                raise_parse_error(node, 'Invalid PositiveInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File_Name':
            File_Name_ = child_.text
            File_Name_ = self.gds_validate_string(File_Name_, node, 'File_Name')
            self.File_Name.append(File_Name_)
# end class List_of_File_NamesType


class List_of_Time_IntervalsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, Time_Interval=None):
        self.original_tagname_ = None
        self.count = _cast(None, count)
        if Time_Interval is None:
            self.Time_Interval = []
        else:
            self.Time_Interval = Time_Interval
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_of_Time_IntervalsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_of_Time_IntervalsType.subclass:
            return List_of_Time_IntervalsType.subclass(*args_, **kwargs_)
        else:
            return List_of_Time_IntervalsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Time_Interval(self): return self.Time_Interval
    def set_Time_Interval(self, Time_Interval): self.Time_Interval = Time_Interval
    def add_Time_Interval(self, value): self.Time_Interval.append(value)
    def insert_Time_Interval_at(self, index, value): self.Time_Interval.insert(index, value)
    def replace_Time_Interval_at(self, index, value): self.Time_Interval[index] = value
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def hasContent_(self):
        if (
            self.Time_Interval
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='List_of_Time_IntervalsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_of_Time_IntervalsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_Time_IntervalsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_Time_IntervalsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_Time_IntervalsType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.count), input_name='count')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='List_of_Time_IntervalsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Time_Interval_ in self.Time_Interval:
            Time_Interval_.export(outfile, level, namespace_, name_='Time_Interval', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            self.count = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Time_Interval':
            obj_ = Time_IntervalType.factory()
            obj_.build(child_)
            self.Time_Interval.append(obj_)
            obj_.original_tagname_ = 'Time_Interval'
# end class List_of_Time_IntervalsType


class Time_IntervalType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Start=None, Stop=None, File_Name=None):
        self.original_tagname_ = None
        if isinstance(Start, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Start, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Start
        self.Start = initvalue_
        if isinstance(Stop, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Stop, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Stop
        self.Stop = initvalue_
        self.File_Name = File_Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Time_IntervalType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Time_IntervalType.subclass:
            return Time_IntervalType.subclass(*args_, **kwargs_)
        else:
            return Time_IntervalType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Start(self): return self.Start
    def set_Start(self, Start): self.Start = Start
    def get_Stop(self): return self.Stop
    def set_Stop(self, Stop): self.Stop = Stop
    def get_File_Name(self): return self.File_Name
    def set_File_Name(self, File_Name): self.File_Name = File_Name
    def validate_StartType(self, value):
        # Validate type StartType, a restriction on xs:dateTime.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_StartType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_StartType_patterns_, ))
    validate_StartType_patterns_ = [['^"\\d\\d\\d\\d\\d\\d\\d\\d_\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d"$']]
    def validate_StopType(self, value):
        # Validate type StopType, a restriction on xs:dateTime.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_StopType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_StopType_patterns_, ))
    validate_StopType_patterns_ = [['^"\\d\\d\\d\\d\\d\\d\\d\\d_\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d"$']]
    def hasContent_(self):
        if (
            self.Start is not None or
            self.Stop is not None or
            self.File_Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Time_IntervalType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Time_IntervalType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Time_IntervalType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Time_IntervalType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Time_IntervalType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Time_IntervalType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Start>%s</Start>%s' % (self.gds_format_datetime(self.Start, input_name='Start'), eol_))
        if self.Stop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Stop>%s</Stop>%s' % (self.gds_format_datetime(self.Stop, input_name='Stop'), eol_))
        if self.File_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name>%s</File_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Name), input_name='File_Name')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Start':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Start = dval_
            # validate type StartType
            self.validate_StartType(self.Start)
        elif nodeName_ == 'Stop':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Stop = dval_
            # validate type StopType
            self.validate_StopType(self.Stop)
        elif nodeName_ == 'File_Name':
            File_Name_ = child_.text
            File_Name_ = self.gds_validate_string(File_Name_, node, 'File_Name')
            self.File_Name = File_Name_
# end class Time_IntervalType


class List_of_OutputsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, Output=None):
        self.original_tagname_ = None
        self.count = _cast(int, count)
        if Output is None:
            self.Output = []
        else:
            self.Output = Output
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_of_OutputsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_of_OutputsType.subclass:
            return List_of_OutputsType.subclass(*args_, **kwargs_)
        else:
            return List_of_OutputsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Output(self): return self.Output
    def set_Output(self, Output): self.Output = Output
    def add_Output(self, value): self.Output.append(value)
    def insert_Output_at(self, index, value): self.Output.insert(index, value)
    def replace_Output_at(self, index, value): self.Output[index] = value
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def hasContent_(self):
        if (
            self.Output
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='List_of_OutputsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_of_OutputsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_OutputsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_OutputsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_OutputsType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
    def exportChildren(self, outfile, level, namespace_='', name_='List_of_OutputsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Output_ in self.Output:
            Output_.export(outfile, level, namespace_, name_='Output', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            try:
                self.count = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.count < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Output':
            obj_ = OutputType.factory()
            obj_.build(child_)
            self.Output.append(obj_)
            obj_.original_tagname_ = 'Output'
# end class List_of_OutputsType


class OutputType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mandatory=None, File_Type=None, File_Name_Type='Physical', File_Name=None):
        self.original_tagname_ = None
        self.mandatory = _cast(bool, mandatory)
        self.File_Type = File_Type
        self.validate_S2_FILE_TYPE_OUTPUT(self.File_Type)
        self.File_Name_Type = File_Name_Type
        self.validate_A_FILE_NAME_TYPE(self.File_Name_Type)
        self.File_Name = File_Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, OutputType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if OutputType.subclass:
            return OutputType.subclass(*args_, **kwargs_)
        else:
            return OutputType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_File_Type(self): return self.File_Type
    def set_File_Type(self, File_Type): self.File_Type = File_Type
    def get_File_Name_Type(self): return self.File_Name_Type
    def set_File_Name_Type(self, File_Name_Type): self.File_Name_Type = File_Name_Type
    def get_File_Name(self): return self.File_Name
    def set_File_Name(self, File_Name): self.File_Name = File_Name
    def get_mandatory(self): return self.mandatory
    def set_mandatory(self, mandatory): self.mandatory = mandatory
    def validate_S2_FILE_TYPE_OUTPUT(self, value):
        # Validate type S2_FILE_TYPE_OUTPUT, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['PDI_GR', 'PDI_GR_LIST', 'PDI_DS', 'PDI_SAD', 'PDI_DS_TILE_LIST', 'PDI_DS_TCI_LIST', 'PDI_DS_PVI_LIST', 'PDI_DS_GR_LIST', 'PDI_ATF', 'PDI_ATF_LIST', 'VECTOR', 'VECTOR_DS_FOOTPRINT', 'MPC', 'REPORT', 'QUICKLOOK', 'IDP_INFOS', 'GRI_ORBIT', 'TIE_POINTS', 'GCP_POINTS', 'FRAME_FILE', 'GRI_LIST_FILE', 'TILE_LIST_FILE', 'VIRTUAL_SENSOR', 'SEGMENTATION_FILE', 'HOMOLOG_POINTS_LIST', 'QUICKLOOK_GEO', 'QUICKLOOK_CM', 'QUICKLOOK', 'ISP_INFOS']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on S2_FILE_TYPE_OUTPUT' % {"value" : value.encode("utf-8")} )
    def validate_A_FILE_NAME_TYPE(self, value):
        # Validate type A_FILE_NAME_TYPE, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['Physical', 'Logical', 'Stem', 'Directory', 'Regexp', 'Prefix']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on A_FILE_NAME_TYPE' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.File_Type is not None or
            self.File_Name_Type != "Physical" or
            self.File_Name is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='OutputType', namespacedef_=' xmlns:ipf_base="http://gs2.esa.int/DICO/1.0/IPF/base/" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('OutputType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OutputType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='OutputType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OutputType'):
        if self.mandatory is not None and 'mandatory' not in already_processed:
            already_processed.add('mandatory')
            outfile.write(' mandatory="%s"' % self.gds_format_boolean(self.mandatory, input_name='mandatory'))
    def exportChildren(self, outfile, level, namespace_='', name_='OutputType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.File_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Type>%s</File_Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Type), input_name='File_Type')), eol_))
        if self.File_Name_Type is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name_Type>%s</File_Name_Type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Name_Type), input_name='File_Name_Type')), eol_))
        if self.File_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<File_Name>%s</File_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.File_Name), input_name='File_Name')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('mandatory', node)
        if value is not None and 'mandatory' not in already_processed:
            already_processed.add('mandatory')
            if value in ('true', '1'):
                self.mandatory = True
            elif value in ('false', '0'):
                self.mandatory = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'File_Type':
            File_Type_ = child_.text
            File_Type_ = self.gds_validate_string(File_Type_, node, 'File_Type')
            self.File_Type = File_Type_
            # validate type S2_FILE_TYPE_OUTPUT
            self.validate_S2_FILE_TYPE_OUTPUT(self.File_Type)
        elif nodeName_ == 'File_Name_Type':
            File_Name_Type_ = child_.text
            File_Name_Type_ = self.gds_validate_string(File_Name_Type_, node, 'File_Name_Type')
            self.File_Name_Type = File_Name_Type_
            # validate type A_FILE_NAME_TYPE
            self.validate_A_FILE_NAME_TYPE(self.File_Name_Type)
        elif nodeName_ == 'File_Name':
            File_Name_ = child_.text
            File_Name_ = self.gds_validate_string(File_Name_, node, 'File_Name')
            self.File_Name = File_Name_
# end class OutputType


class Ipf_ConfType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Processor_Name=None, Version=None, Stdout_Log_Level='INFO', Stderr_Log_Level='INFO', Test=False, Breakpoint_Enable=False, Acquisition_Station=None, Processing_Station=None, Config_Files=None, Sensing_Time=None, Dynamic_Processing_Parameters=None):
        self.original_tagname_ = None
        self.Processor_Name = Processor_Name
        self.Version = Version
        self.validate_A_DPC_WORKFLOW_VERSION(self.Version)
        self.Stdout_Log_Level = Stdout_Log_Level
        self.validate_Stdout_Log_LevelType(self.Stdout_Log_Level)
        self.Stderr_Log_Level = Stderr_Log_Level
        self.validate_Stderr_Log_LevelType(self.Stderr_Log_Level)
        self.Test = Test
        self.validate_TestType(self.Test)
        self.Breakpoint_Enable = Breakpoint_Enable
        self.validate_Breakpoint_EnableType(self.Breakpoint_Enable)
        self.Acquisition_Station = Acquisition_Station
        self.validate_Acquisition_StationType(self.Acquisition_Station)
        self.Processing_Station = Processing_Station
        self.validate_Processing_StationType(self.Processing_Station)
        self.Config_Files = Config_Files
        self.Sensing_Time = Sensing_Time
        self.Dynamic_Processing_Parameters = Dynamic_Processing_Parameters
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Ipf_ConfType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Ipf_ConfType.subclass:
            return Ipf_ConfType.subclass(*args_, **kwargs_)
        else:
            return Ipf_ConfType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Processor_Name(self): return self.Processor_Name
    def set_Processor_Name(self, Processor_Name): self.Processor_Name = Processor_Name
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def get_Stdout_Log_Level(self): return self.Stdout_Log_Level
    def set_Stdout_Log_Level(self, Stdout_Log_Level): self.Stdout_Log_Level = Stdout_Log_Level
    def get_Stderr_Log_Level(self): return self.Stderr_Log_Level
    def set_Stderr_Log_Level(self, Stderr_Log_Level): self.Stderr_Log_Level = Stderr_Log_Level
    def get_Test(self): return self.Test
    def set_Test(self, Test): self.Test = Test
    def get_Breakpoint_Enable(self): return self.Breakpoint_Enable
    def set_Breakpoint_Enable(self, Breakpoint_Enable): self.Breakpoint_Enable = Breakpoint_Enable
    def get_Acquisition_Station(self): return self.Acquisition_Station
    def set_Acquisition_Station(self, Acquisition_Station): self.Acquisition_Station = Acquisition_Station
    def get_Processing_Station(self): return self.Processing_Station
    def set_Processing_Station(self, Processing_Station): self.Processing_Station = Processing_Station
    def get_Config_Files(self): return self.Config_Files
    def set_Config_Files(self, Config_Files): self.Config_Files = Config_Files
    def get_Sensing_Time(self): return self.Sensing_Time
    def set_Sensing_Time(self, Sensing_Time): self.Sensing_Time = Sensing_Time
    def get_Dynamic_Processing_Parameters(self): return self.Dynamic_Processing_Parameters
    def set_Dynamic_Processing_Parameters(self, Dynamic_Processing_Parameters): self.Dynamic_Processing_Parameters = Dynamic_Processing_Parameters
    def validate_A_DPC_WORKFLOW_VERSION(self, value):
        # Validate type A_DPC_WORKFLOW_VERSION, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_A_DPC_WORKFLOW_VERSION_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_A_DPC_WORKFLOW_VERSION_patterns_, ))
    validate_A_DPC_WORKFLOW_VERSION_patterns_ = [['^\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}$']]
    def validate_Stdout_Log_LevelType(self, value):
        # Validate type Stdout_Log_LevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DEBUG', 'INFO', 'PROGRESS', 'WARNING', 'ERROR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Stdout_Log_LevelType' % {"value" : value.encode("utf-8")} )
    def validate_Stderr_Log_LevelType(self, value):
        # Validate type Stderr_Log_LevelType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['DEBUG', 'INFO', 'PROGRESS', 'WARNING', 'ERROR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on Stderr_Log_LevelType' % {"value" : value.encode("utf-8")} )
    def validate_TestType(self, value):
        # Validate type TestType, a restriction on xs:boolean.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TestType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_TestType_patterns_, ))
    validate_TestType_patterns_ = [['^true$', '^false$']]
    def validate_Breakpoint_EnableType(self, value):
        # Validate type Breakpoint_EnableType, a restriction on xs:boolean.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Breakpoint_EnableType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Breakpoint_EnableType_patterns_, ))
    validate_Breakpoint_EnableType_patterns_ = [['^true$', '^false$']]
    def validate_Acquisition_StationType(self, value):
        # Validate type Acquisition_StationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Acquisition_StationType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Acquisition_StationType_patterns_, ))
    validate_Acquisition_StationType_patterns_ = [['^[\\w{Lu}_]{4}$']]
    def validate_Processing_StationType(self, value):
        # Validate type Processing_StationType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Processing_StationType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_Processing_StationType_patterns_, ))
    validate_Processing_StationType_patterns_ = [['^[\\w{Lu}_]{4}$']]
    def hasContent_(self):
        if (
            self.Processor_Name is not None or
            self.Version is not None or
            self.Stdout_Log_Level != "INFO" or
            self.Stderr_Log_Level != "INFO" or
            self.Test or
            self.Breakpoint_Enable or
            self.Acquisition_Station is not None or
            self.Processing_Station is not None or
            self.Config_Files is not None or
            self.Sensing_Time is not None or
            self.Dynamic_Processing_Parameters is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Ipf_ConfType', namespacedef_=' xmlns:ipf_base="http://gs2.esa.int/DICO/1.0/IPF/base/" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Ipf_ConfType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Ipf_ConfType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Ipf_ConfType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Ipf_ConfType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Ipf_ConfType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Processor_Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Processor_Name>%s</Processor_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Processor_Name), input_name='Processor_Name')), eol_))
        if self.Version is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Version>%s</Version>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Version), input_name='Version')), eol_))
        if self.Stdout_Log_Level is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Stdout_Log_Level>%s</Stdout_Log_Level>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Stdout_Log_Level), input_name='Stdout_Log_Level')), eol_))
        if self.Stderr_Log_Level is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Stderr_Log_Level>%s</Stderr_Log_Level>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Stderr_Log_Level), input_name='Stderr_Log_Level')), eol_))
        if self.Test is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Test>%s</Test>%s' % (self.gds_format_boolean(self.Test, input_name='Test'), eol_))
        if self.Breakpoint_Enable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Breakpoint_Enable>%s</Breakpoint_Enable>%s' % (self.gds_format_boolean(self.Breakpoint_Enable, input_name='Breakpoint_Enable'), eol_))
        if self.Acquisition_Station is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Acquisition_Station>%s</Acquisition_Station>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Acquisition_Station), input_name='Acquisition_Station')), eol_))
        if self.Processing_Station is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Processing_Station>%s</Processing_Station>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Processing_Station), input_name='Processing_Station')), eol_))
        if self.Config_Files is not None:
            self.Config_Files.export(outfile, level, namespace_, name_='Config_Files', pretty_print=pretty_print)
        if self.Sensing_Time is not None:
            self.Sensing_Time.export(outfile, level, namespace_, name_='Sensing_Time', pretty_print=pretty_print)
        if self.Dynamic_Processing_Parameters is not None:
            self.Dynamic_Processing_Parameters.export(outfile, level, namespace_, name_='Dynamic_Processing_Parameters', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Processor_Name':
            Processor_Name_ = child_.text
            Processor_Name_ = self.gds_validate_string(Processor_Name_, node, 'Processor_Name')
            self.Processor_Name = Processor_Name_
        elif nodeName_ == 'Version':
            Version_ = child_.text
            Version_ = self.gds_validate_string(Version_, node, 'Version')
            self.Version = Version_
            # validate type A_DPC_WORKFLOW_VERSION
            self.validate_A_DPC_WORKFLOW_VERSION(self.Version)
        elif nodeName_ == 'Stdout_Log_Level':
            Stdout_Log_Level_ = child_.text
            Stdout_Log_Level_ = self.gds_validate_string(Stdout_Log_Level_, node, 'Stdout_Log_Level')
            self.Stdout_Log_Level = Stdout_Log_Level_
            # validate type Stdout_Log_LevelType
            self.validate_Stdout_Log_LevelType(self.Stdout_Log_Level)
        elif nodeName_ == 'Stderr_Log_Level':
            Stderr_Log_Level_ = child_.text
            Stderr_Log_Level_ = self.gds_validate_string(Stderr_Log_Level_, node, 'Stderr_Log_Level')
            self.Stderr_Log_Level = Stderr_Log_Level_
            # validate type Stderr_Log_LevelType
            self.validate_Stderr_Log_LevelType(self.Stderr_Log_Level)
        elif nodeName_ == 'Test':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Test')
            self.Test = ival_
            # validate type TestType
            self.validate_TestType(self.Test)
        elif nodeName_ == 'Breakpoint_Enable':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'Breakpoint_Enable')
            self.Breakpoint_Enable = ival_
            # validate type Breakpoint_EnableType
            self.validate_Breakpoint_EnableType(self.Breakpoint_Enable)
        elif nodeName_ == 'Acquisition_Station':
            Acquisition_Station_ = child_.text
            Acquisition_Station_ = self.gds_validate_string(Acquisition_Station_, node, 'Acquisition_Station')
            self.Acquisition_Station = Acquisition_Station_
            # validate type Acquisition_StationType
            self.validate_Acquisition_StationType(self.Acquisition_Station)
        elif nodeName_ == 'Processing_Station':
            Processing_Station_ = child_.text
            Processing_Station_ = self.gds_validate_string(Processing_Station_, node, 'Processing_Station')
            self.Processing_Station = Processing_Station_
            # validate type Processing_StationType
            self.validate_Processing_StationType(self.Processing_Station)
        elif nodeName_ == 'Config_Files':
            obj_ = Config_FilesType.factory()
            obj_.build(child_)
            self.Config_Files = obj_
            obj_.original_tagname_ = 'Config_Files'
        elif nodeName_ == 'Sensing_Time':
            obj_ = Sensing_TimeType.factory()
            obj_.build(child_)
            self.Sensing_Time = obj_
            obj_.original_tagname_ = 'Sensing_Time'
        elif nodeName_ == 'Dynamic_Processing_Parameters':
            obj_ = Dynamic_Processing_ParametersType.factory()
            obj_.build(child_)
            self.Dynamic_Processing_Parameters = obj_
            obj_.original_tagname_ = 'Dynamic_Processing_Parameters'
# end class Ipf_ConfType


class Config_FilesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Conf_File_Name=None):
        self.original_tagname_ = None
        if Conf_File_Name is None:
            self.Conf_File_Name = []
        else:
            self.Conf_File_Name = Conf_File_Name
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Config_FilesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Config_FilesType.subclass:
            return Config_FilesType.subclass(*args_, **kwargs_)
        else:
            return Config_FilesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Conf_File_Name(self): return self.Conf_File_Name
    def set_Conf_File_Name(self, Conf_File_Name): self.Conf_File_Name = Conf_File_Name
    def add_Conf_File_Name(self, value): self.Conf_File_Name.append(value)
    def insert_Conf_File_Name_at(self, index, value): self.Conf_File_Name.insert(index, value)
    def replace_Conf_File_Name_at(self, index, value): self.Conf_File_Name[index] = value
    def hasContent_(self):
        if (
            self.Conf_File_Name
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Config_FilesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Config_FilesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Config_FilesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Config_FilesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Config_FilesType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Config_FilesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Conf_File_Name_ in self.Conf_File_Name:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Conf_File_Name>%s</Conf_File_Name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(Conf_File_Name_), input_name='Conf_File_Name')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Conf_File_Name':
            Conf_File_Name_ = child_.text
            Conf_File_Name_ = self.gds_validate_string(Conf_File_Name_, node, 'Conf_File_Name')
            self.Conf_File_Name.append(Conf_File_Name_)
# end class Config_FilesType


class Sensing_TimeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Start=None, Stop=None):
        self.original_tagname_ = None
        self.Start = Start
        self.validate_StartType1(self.Start)
        self.Stop = Stop
        self.validate_StopType2(self.Stop)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Sensing_TimeType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Sensing_TimeType.subclass:
            return Sensing_TimeType.subclass(*args_, **kwargs_)
        else:
            return Sensing_TimeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Start(self): return self.Start
    def set_Start(self, Start): self.Start = Start
    def get_Stop(self): return self.Stop
    def set_Stop(self, Stop): self.Stop = Stop
    def validate_StartType1(self, value):
        # Validate type StartType1, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_StartType1_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_StartType1_patterns_, ))
    validate_StartType1_patterns_ = [['^\\d\\d\\d\\d\\d\\d\\d\\dT\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\dZ$']]
    def validate_StopType2(self, value):
        # Validate type StopType2, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_StopType2_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_StopType2_patterns_, ))
    validate_StopType2_patterns_ = [['^\\d\\d\\d\\d\\d\\d\\d\\dT\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\dZ$']]
    def hasContent_(self):
        if (
            self.Start is not None or
            self.Stop is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Sensing_TimeType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Sensing_TimeType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Sensing_TimeType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Sensing_TimeType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Sensing_TimeType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Sensing_TimeType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Start is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Start>%s</Start>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Start), input_name='Start')), eol_))
        if self.Stop is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<Stop>%s</Stop>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.Stop), input_name='Stop')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Start':
            Start_ = child_.text
            Start_ = self.gds_validate_string(Start_, node, 'Start')
            self.Start = Start_
            # validate type StartType1
            self.validate_StartType1(self.Start)
        elif nodeName_ == 'Stop':
            Stop_ = child_.text
            Stop_ = self.gds_validate_string(Stop_, node, 'Stop')
            self.Stop = Stop_
            # validate type StopType2
            self.validate_StopType2(self.Stop)
# end class Sensing_TimeType


class Dynamic_Processing_ParametersType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Processing_Parameter=None):
        self.original_tagname_ = None
        if Processing_Parameter is None:
            self.Processing_Parameter = []
        else:
            self.Processing_Parameter = Processing_Parameter
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Dynamic_Processing_ParametersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Dynamic_Processing_ParametersType.subclass:
            return Dynamic_Processing_ParametersType.subclass(*args_, **kwargs_)
        else:
            return Dynamic_Processing_ParametersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Processing_Parameter(self): return self.Processing_Parameter
    def set_Processing_Parameter(self, Processing_Parameter): self.Processing_Parameter = Processing_Parameter
    def add_Processing_Parameter(self, value): self.Processing_Parameter.append(value)
    def insert_Processing_Parameter_at(self, index, value): self.Processing_Parameter.insert(index, value)
    def replace_Processing_Parameter_at(self, index, value): self.Processing_Parameter[index] = value
    def hasContent_(self):
        if (
            self.Processing_Parameter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='Dynamic_Processing_ParametersType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Dynamic_Processing_ParametersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Dynamic_Processing_ParametersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='Dynamic_Processing_ParametersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Dynamic_Processing_ParametersType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Dynamic_Processing_ParametersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Processing_Parameter_ in self.Processing_Parameter:
            Processing_Parameter_.export(outfile, level, namespace_, name_='Processing_Parameter', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Processing_Parameter':
            obj_ = Processing_Parameter.factory()
            obj_.build(child_)
            self.Processing_Parameter.append(obj_)
            obj_.original_tagname_ = 'Processing_Parameter'
# end class Dynamic_Processing_ParametersType


class List_of_Ipf_ProcsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, count=None, Ipf_Proc=None):
        self.original_tagname_ = None
        self.count = _cast(int, count)
        if Ipf_Proc is None:
            self.Ipf_Proc = []
        else:
            self.Ipf_Proc = Ipf_Proc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, List_of_Ipf_ProcsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if List_of_Ipf_ProcsType.subclass:
            return List_of_Ipf_ProcsType.subclass(*args_, **kwargs_)
        else:
            return List_of_Ipf_ProcsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Ipf_Proc(self): return self.Ipf_Proc
    def set_Ipf_Proc(self, Ipf_Proc): self.Ipf_Proc = Ipf_Proc
    def add_Ipf_Proc(self, value): self.Ipf_Proc.append(value)
    def insert_Ipf_Proc_at(self, index, value): self.Ipf_Proc.insert(index, value)
    def replace_Ipf_Proc_at(self, index, value): self.Ipf_Proc[index] = value
    def get_count(self): return self.count
    def set_count(self, count): self.count = count
    def hasContent_(self):
        if (
            self.Ipf_Proc
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='List_of_Ipf_ProcsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('List_of_Ipf_ProcsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='List_of_Ipf_ProcsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='List_of_Ipf_ProcsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='List_of_Ipf_ProcsType'):
        if self.count is not None and 'count' not in already_processed:
            already_processed.add('count')
            outfile.write(' count="%s"' % self.gds_format_integer(self.count, input_name='count'))
    def exportChildren(self, outfile, level, namespace_='', name_='List_of_Ipf_ProcsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Ipf_Proc_ in self.Ipf_Proc:
            Ipf_Proc_.export(outfile, level, namespace_, name_='Ipf_Proc', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('count', node)
        if value is not None and 'count' not in already_processed:
            already_processed.add('count')
            try:
                self.count = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.count < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Ipf_Proc':
            obj_ = Ipf_Proc.factory()
            obj_.build(child_)
            self.Ipf_Proc.append(obj_)
            obj_.original_tagname_ = 'Ipf_Proc'
# end class List_of_Ipf_ProcsType


GDSClassesMapping = {
    'Ipf_Job_Order': Ipf_Job_OrderType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Processing_Parameter'
        rootClass = Processing_Parameter
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Processing_Parameter'
        rootClass = Processing_Parameter
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Processing_Parameter'
        rootClass = Processing_Parameter
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Processing_Parameter'
        rootClass = Processing_Parameter
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from JobOrderReaderNew import *\n\n')
        sys.stdout.write('import JobOrderReaderNew as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "A_JULIAN_DAY",
    "A_MESSAGE",
    "BreakpointType",
    "Brk_FileType",
    "Config_FilesType",
    "Dynamic_Processing_ParametersType",
    "InputType",
    "Ipf_ConfType",
    "Ipf_Job_OrderType",
    "Ipf_Proc",
    "List_of_Brk_FilesType",
    "List_of_File_NamesType",
    "List_of_InputsType",
    "List_of_Ipf_ProcsType",
    "List_of_OutputsType",
    "List_of_Time_IntervalsType",
    "OutputType",
    "Param_Info",
    "Processing_Parameter",
    "Sensing_TimeType",
    "Time_IntervalType"
]
